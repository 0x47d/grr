#!/usr/bin/env python
# Copyright 2011 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""Functions for audit and logging."""



import logging
import os
import socket
import time

from grr.client import conf

try:
  LOGFILE_PATH = "%s/system32/logfiles/GRRlog.txt" % os.environ["WINDIR"]
except KeyError:
  LOGFILE_PATH = "/tmp/GRRlog.txt"

conf.PARSER.add_option("", "--grrlog", default=LOGFILE_PATH,
                       help="Path to log file.")

FLAGS = conf.PARSER.flags


class GrrLogger(object):
  """Code to emit DataAccessLogProto records."""

  def __init__(self, component):
    """Initialize a logging object.

    Args:
      component: Identifier for the component doing the logging, string.
    """
    path = FLAGS.grrlog
    logger = logging.getLogger()
    log_level = logging.INFO
    if FLAGS.verbose:
      log_level = logging.DEBUG
      logger.setLevel(log_level)

      # Also log to stderr.
      handler = logging.StreamHandler()
      handler.setLevel(logging.DEBUG)
      logger.addHandler(handler)

    # Create a logfile.
    filehandler = logging.FileHandler(path, mode="ab")
    filehandler.setLevel(logging.DEBUG)
    logger.addHandler(filehandler)

    self._hostname = socket.gethostname()
    self._ip = socket.gethostbyname(self._hostname)
    self._port = getattr(FLAGS, "port", 0)
    self._component = component
    self._epid = os.getpid()

    logging.info("GrrLogger will save logs to %s", path)

  def WriteFrontendLogEntry(self, event_id, request, response):
    """Write a log entry for a Frontend or UI Request.

    Args:
      event_id: String generated by GetNewEventId.
      request: A HttpRequest protobuf.
      response: A HttpResponse protobuf.
    """
    log_msg = "%s-%s %d: %s %s %s %d %s" % (
        event_id, request.source_ip, response.code,
        request.method, request.url, request.user_agent, response.size,
        request.user)
    logging.info(log_msg)

  def GetNewEventId(self, event_time=None):
    """Return a unique Event ID string."""
    if event_time is None:
      event_time = long(time.time() * 1e6)
    return "%s:%s:%s" % (event_time, self._hostname, self._epid)
