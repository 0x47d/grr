' Seems to be some kind of turn off all errors in VB
On Error Resume Next

basename = "%(ClientBuildWindows.name)s"
package_build = "%(Temp.arch)s"
basename_text = "%(ClientBuildWindows.name)s"
service_name = "%(ClientBuildWindows.description)s"
service_file = "%(ClientBuildWindows.service_name)s"
client_file = "%(ClientBuildWindows.binary_name)s"
install_dir = "%(ClientBuildWindows.full_install_path)s" & "\"
reg_hive_name = "%(ClientBuildWindows.service_key_hive)s"
reg_base = "%(ClientBuildWindows.service_key_path)s"

' Where the HTTP URL of the service is?
location = "%(ClientBuild.location)s"

' The CA Certificate we trust
cacert = "%(ServerKeys.ca_public_cert|join)s"

' The public key we trust for running binaries
exec_signing_key = "%(ClientSigningKeysWindows.executable_signing_public_key|join)s"

' The public key we trust for loading drivers
driver_signing_key = "%(ClientSigningKeysWindows.driver_signing_public_key|join)s"

If reg_hive_name = "HKEY_CLASSES_ROOT" Then
  reg_hive = &H80000000
ElseIf reg_hive_name = "HKEY_CURRENT_USER" Then
  reg_hive = &H80000001
ElseIf reg_hive_name = "HKEY_LOCAL_MACHINE" Then
  reg_hive = &H80000002
ElseIf reg_hive_name = "HKEY_USERS" Then
  reg_hive = &H80000003
ElseIf reg_hive_name = "HKEY_PERFORMANCE_DATA" Then
  reg_hive = &H80000004
ElseIf reg_hive_name = "HKEY_CURRENT_CONFIG" Then
  reg_hive = &H80000005
ElseIf reg_hive_name = "HKEY_DYN_DATA" Then
  reg_hive = &H80000006
End If

Function RecursivelyCreateDirectory(Path)
  Dim fso: Set fso = Wscript.CreateObject("Scripting.FileSystemObject")
  if fso.FolderExists(Path) Then Exit Function
  Call RecursivelyCreateDirectory(fso.GetParentFolderName(Path))
  fso.CreateFolder(Path)
  End Function

Set objShell = Wscript.CreateObject("WScript.Shell")
Set fso = Wscript.CreateObject("Scripting.FileSystemObject")

' Stop the service first
Set oExec = objShell.Exec("sc stop " & service_name)
Do While oExec.Status = 0
  Wscript.Sleep 100
Loop

destination = objShell.ExpandEnvironmentStrings(install_dir)

' Create the output directory if needed.
RecursivelyCreateDirectory(destination)

' Copy into the output directory
fso.CopyFile objShell.CurrentDirectory & "\*.*", destination, TRUE

service_path = destination & service_file
client_path = destination & client_file

' Write the nanny registry keys.
call CreateKey (reg_hive, reg_base,64)
call WriteRegStr (reg_hive, reg_base, "Version", "%(ClientBuildWindows.version_string)s", 64)
call WriteRegStr (reg_hive, reg_base, "%(ClientBuildWindows.binary_child)s", client_path, 64)
call WriteRegStr (reg_hive, reg_base, "%(ClientBuildWindows.binary_commandline)s", client_path + " %(ClientBuildWindows.initial_commandline)s", 64)
call WriteRegStr (reg_hive, reg_base, "location", location, 64)
call WriteRegStr (reg_hive, reg_base, "cacert", cacert, 64)
call WriteRegStr (reg_hive, reg_base, "exec_signing_key", exec_signing_key, 64)
call WriteRegStr (reg_hive, reg_base, "driver_signing_key", driver_signing_key, 64)

' Install and start the service.
Set oExec = objShell.Exec(service_path & " install")
Do While oExec.Status = 0
  Wscript.Sleep 100
Loop

' Give the service a chance to start.
Wscript.Sleep 500


' Add recovery options to the service.
cmd = "sc failure " & chr(34) & service_name & chr(34) & " reset= 3600 actions= restart/10000/restart/30000/restart/3600000"
Set oExec = objShell.Exec(cmd)
Do While oExec.Status = 0
  Wscript.Sleep 100
Loop

' Registry helper functions.

Function WriteRegStr (RootKey, Key, ValueName, Value, RegType)
    Dim oCtx, oLocator, oReg, oInParams

    Set oCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    oCtx.Add "__ProviderArchitecture", RegType

    Set oLocator = CreateObject("Wbemscripting.SWbemLocator")
    Set oReg = oLocator.ConnectServer("", "root\default", "", "", , , , oCtx).Get("StdRegProv")

    Set oInParams = oReg.Methods_("SetStringValue").InParameters
    oInParams.hDefKey = RootKey
    oInParams.sSubKeyName = Key
    oInParams.sValueName = ValueName
    oInParams.sValue = Value

    call oReg.ExecMethod_("SetStringValue", oInParams, , oCtx)

End Function

Function CreateKey(RootKey, Key, RegType)
    Dim oCtx, oLocator, oReg, oInParams

    Set oCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    oCtx.Add "__ProviderArchitecture", RegType

    Set oLocator = CreateObject("Wbemscripting.SWbemLocator")
    Set oReg = oLocator.ConnectServer("", "root\default", "", "", , , , oCtx).Get("StdRegProv")

    Set oInParams = oReg.Methods_("CreateKey").InParameters
    oInParams.hDefKey = RootKey
    oInParams.sSubKeyName = Key

    call oReg.ExecMethod_("CreateKey", oInParams, , oCtx)

End Function
