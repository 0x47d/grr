[GRR Config]
__doc__ = This is the template used in deployment of GRR. It contains the basic
  elements and test configurations to run the system.


[Datastore]
implementation = MongoDataStore
security_manager = BasicAccessControlManager

[MongoDataStore]
__doc__ = Mongo settings

[AdminUI]
__doc__ = These settings will be executed in the admin ui component.
webauth_manager = BasicWebAuthManager
url = http://localhost:8000
django_debug = True
port = 8000
django_secret_key = CHANGE_ME
Logging.filename = %(Logging.path)/grr-ui.log

[Frontend]
bind_address = ::
bind_port = 8080
Logging.filename = %(Logging.path)/grr-http-server.log

[Worker]
Logging.filename = %(Logging.path)/grr-worker.log

[Enroller]
Logging.filename = %(Logging.path)/grr-enroller.log


[Logging]
__doc__ = Store the logs somewhere sensible.
path = /var/log/grr/

[Monitoring]
__doc__ = Monitoring parameters.
alert_email = grr-monitoring@example.com
emergency_access_email = grr-emergency-access@example.com

[CA]


[PrivateKeys]

[Demo]
Client.rss_max = 4000
Datastore.implementation = FakeDataStore
Frontend.bind_address = 127.0.0.1
Frontend.bind_port = 8080
Client.location = http://%(Frontend.bind_address):%(Frontend.bind_port)/control
Client.poll_max = 5
Logging.filename = %(Logging.path)/grr-demo.log


[LocalTest]
__doc__ = Do local testing.
# Increase the client memory limit to 4GB.
Client.rss_max = 4000

Client.location = http://localhost:8080/control
Client.poll_max = 5
Frontend.bind_address = 127.0.0.1
Frontend.bind_port = 8080
AdminUI.bind = 127.0.0.1
AdminUI.port = 8000

[Network]
api = 3


[Client]
version_major = 2
version_minor = 5
version_revision = 0
version_release = 5
location = http://localhost:8080/control
name = GRR
company_name = GRR Project
description = %(name) %(system) %(platform)
proxy_servers =


[ClientBuildWindows]
__doc__ = This section will be executed when building a windows client, the
  resulting configuration change will be copied to the client\'s deployment
  binary configuration.

config_key = Software\\%(Client.name)
config_hive = HKEY_LOCAL_MACHINE

Client.install_path! = %(SystemRoot|env)\\System32\\%(Client.name)\\%(Client.version_string)
Client.config = reg://%(config_hive)/%(config_key)

PyInstaller.console = False

Client.binary_name = %(Client.name).exe

NannyWindows.service_key_hive = %(config_hive)
NannyWindows.service_key = %(config_key)\\NannyWindows

Logging.filename! = %(WINDIR|env)/System32/logfiles/%(Client.name).log
Logging.engines = %(Logging.engines),event_log

Logging.verbose = False


[ClientLinux]
__doc__ = This section overrides client configuration for linux deployments.
Logging.engines = %(Logging.engines),syslog
Logging.path = /tmp/grr_logs/
Logging.syslog_path = /dev/log

[ClientDarwin]
__doc__ = This section overrides client configuration for osx deployments.
@inherit_from_section = Client
config_file_name = grr.ini
config_file_path_prefix = /etc
plist_binary_directory = grr
plist_binary_name = grrd
plist_binary_prefix = /usr
plist_binary_path = %(plist_binary_prefix)/%(plist_binary_directory)/%(plist_binary_name)
plist_filename = %(plist_label).plist
plist_label_prefix = com
plist_label = %(plist_label_prefix).grr.code.%(plist_binary_name)
plist_path = /Library/LaunchDaemons/%(plist_filename)
package_maker_organization = com.grr.code

Logging.engines = %(Logging.engines),syslog
Logging.syslog_path = localhost:514


[NannyWindows]
nanny_binary = %(Client.install_path)\\%(service_binary_name)
child_binary = %(Client.install_path)\\%(Client.binary_name)
child_command_line = %(child_binary) --config "%(Client.config)"
service_name = %(Client.name) Monitor
service_binary_name = %(Client.name)service.exe



[ClientBuilder]
source = /usr/share

[Test]
__doc__ = Section used for configuring test harness parameters.

Nanny.unresponsive_kill_period_doc = When running the tests we want to disable
  the nanny so we can debug.

Nanny.unresponsive_kill_period = 3600
Datastore.implementation = FakeDataStore

[Verbose]
__doc__ = This section is executed when we need to use verbose logging.

logging.verbose = True

[MemoryDriverWindows]
driver_file_32 = binaries/winpmem_32.sys
driver_file_64 = binaries/winpmem_64.sys
device_path = \\\\.\\pmem
install_write_path =
driver_service_name = pmem
driver_display_name = grr pmem

[MemoryDriverDarwin]
driver_file_64 = binaries/OSXPMem-RC1.tar.gz
device_path = /dev/pmem
install_write_path =

[MemoryDriverLinux]
device_path = /dev/pmem
install_write_path =
