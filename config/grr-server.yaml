# GRR Server configuration file
# This is the template used in deployment of GRR. It contains the basic
# elements and test configurations to run the system.


Datastore.implementation: MongoDataStore
Datastore.security_manager: BasicAccessControlManager

# Mongo.server:
Mongo.port: 27017
Mongo.db_name: grr

# Mysql.database_name:
# Mysql.table_name:
# Mysql.database_username:
# Mysql.database_password:

AdminUI.webauth_manager: BasicWebAuthManager
AdminUI.url: http://localhost:8000
AdminUI.django_debug: True
AdminUI.port: 8000
AdminUI.bind: "::"
AdminUI.django_secret_key: CHANGE_ME

Logging.path: /var/log/grr
Logging.verbose: True

AdminUI Context:
  Logging.filename: "%(Logging.path)/grr-ui.log"

Demo Context:
  Client.rss_max: 4000
  Datastore.implementation: FakeDataStore
  Frontend.bind_address: 127.0.0.1
  Frontend.bind_port: 8080
  Client.location: http://%(Frontend.bind_address):%(Frontend.bind_port)/control
  Client.poll_max: 5
  Logging.filename: "%(Logging.path)/grr-demo.log"

Frontend Context:
  Logging.filename: "%(Logging.path)/grr-http-server.log"

Worker Context:
  Logging.filename: "%(Logging.path)/grr-worker.log"

Enroller Context:
  Logging.filename: "%(Logging.path)/grr-enroller.log"

SingleServer Context:
  Logging.filename: "%(Logging.path)/grr-single-server.log"

CommandLineTools Context:
  Logging.verbose: False
  Logging.engines: stderr

Monitoring.alert_email: grr-monitoring@example.com
Monitoring.emergency_access_email: grr-emergency-access@example.com
Monitoring.events_email: grr-monitoring@example.com

Client.version_major: 0
Client.version_minor: 2
Client.version_revision: 8
Client.version_release: 1
Client.location: http://localhost:8080/control
Client.name: GRR
Client.company_name: GRR Project
Client.description: "%(name) %(platform) %(arch)"
Client.proxy_servers:

Client Context:
  Config.writeback: /etc/grr/client.local.yaml

Config.aff4_root: aff4:/config/

# Writeback for server components.
Config.writeback: /etc/grr/server.local.yaml

ConfigUpdater Context:
  ClientBuilder.executables_path: /usr/share/grr/executables

# The client's reported architecture string depends on the Arch context
Arch:amd64:
  Client.arch: amd64

Arch:i386:
  Client.arch: i386

ClientBuilder Context:
  ClientBuilder.vs_dir: |
    %{C:\Program Files (x86)\Microsoft Visual Studio 10.0}

  ClientBuilder.executables_path: |
    %(ClientBuilder.source)/grr/executables

  Target:Windows:
    Client.config_key: Software\\%(Client.name)
    Client.config_hive: HKEY_LOCAL_MACHINE
    Client.install_path!: "%(SystemRoot|env)\\System32\\%(Client.name)\\%(Client.version_string)"
    Client.config: reg://%(Client.config_hive)/%(Client.config_key)

    Client.binary_name: "%(Client.name).exe"

    NannyWindows.service_key_hive: "%(Client.config_hive)"
    NannyWindows.service_key: "%(Client.config_key)\\NannyWindows"

    ClientBuilder.client_installer_logfile!: "%(WINDIR|env)/System32/logfiles/%(Client.name)_installer.txt"
    ClientBuilder.client_logging_filename!: "%(WINDIR|env)/System32/logfiles/%(Client.name).log"
    ClientBuilder.client_logging_path!: "%(WINDIR|env)/System32/logfiles"
    ClientBuilder.client_logging_engines: file,stderr,event_log

    Logging.verbose: False

    PyInstaller.path: C:\\build\\pyinstaller\\pyinstaller.py
    ClientBuilder.vs_dir: C:\\Program Files\\Microsoft Visual Studio 10.0

    ClientBuilder.template_extension: .zip
    ClientBuilder.output_extension: .exe

  Target:Darwin:
    ClientBuilder.build_root_dir: /Users/%(USER|env)/mac-build
    ClientBuilder.build_src_dir: "%(build_root_dir)/grr"
    ClientBuilder.build_dest: "%(plist_binary_directory)-build"
    ClientBuilder.build_dest_dir: "%(build_root_dir)/%(build_dest)"
    ClientBuilder.plist_binary_directory: grr
    ClientBuilder.plist_binary_name: grr
    ClientBuilder.plist_binary_prefix: /usr/lib
    ClientBuilder.plist_binary_path: |
        %(plist_binary_prefix)/%(PyInstaller.output_basename)/%(plist_binary_name)

    ClientBuilder.plist_filename: "%(plist_label).plist"
    ClientBuilder.plist_label_prefix: com
    ClientBuilder.plist_label: |
        %(plist_label_prefix).google.corp.%(plist_binary_name)

    ClientBuilder.plist_path: /Library/LaunchDaemons/%(plist_filename)
    ClientBuilder.package_maker_name: grr
    ClientBuilder.package_maker_organization: com.google.corp
    ClientBuilder.package_maker_path: |
        /Applications/PackageMaker.app/Contents/MacOS/PackageMaker

    ClientBuilder.package_dir: "%(build_root_dir)/pkg"
    ClientBuilder.output_extension: .pkg

    PyInstaller.output_root: grr
    PyInstaller.config_name: grr.yaml
    PyInstaller.output_version_dir: |
        %(Client.name)_%(Client.version_numeric)_%(Client.arch)
    PyInstaller.output_basename: |
        %(PyInstaller.output_root)/%(PyInstaller.output_version_dir)
    PyInstaller.build_dir: |
        %(build_dest_dir)
    PyInstaller.path: |
      /Users/%(USER|env)/mac-build/pyinstaller-2.0/pyinstaller.py

  Target:Linux:
    Logging.engines: stderr
    Client.name: grr

    PyInstaller.build_root_dir: /usr/local/grr_build
    PyInstaller.build_dir: |
      %(PyInstaller.build_root_dir)/build
    PyInstaller.path: |
      %(PyInstaller.build_root_dir)/pyinstaller/pyinstaller.py
    PyInstaller.output_version_dir: |
      %(Client.name)_%(Client.version_string)_%(Client.arch)
    PyInstaller.dpkg_root: |
      %(PyInstaller.build_root_dir)/dist
    PyInstaller.distpath: |
      %(PyInstaller.dpkg_root)/debian/%(Client.name)/usr/lib/%(Client.name)

    Client.binary_name: grrd
    ClientBuilder.daemon_link: |
      /usr/sbin/%(Client.binary_name)

    ClientBuilder.target_dir: |
      usr/lib/%(Client.name)/%(PyInstaller.output_version_dir)

    ClientBuilder.output_extension: .deb

Platform:Windows:
  Client.platform: windows

  Arch:amd64:
    MemoryDriver.aff4_path: |
       %(Config.aff4_root)/drivers/windows/memory/winpmem.amd64.sys
    MemoryDriver.driver_file: binaries/winpmem_amd64_1.4.sys
    ClientBuilder.vs_env_script: "%(vs_dir)/VC/bin/amd64/vcvars64.bat"
    ClientBuilder.vs_arch: x64

  Arch:i386:
    MemoryDriver.aff4_path: |
       %(Config.aff4_root)/drivers/windows/memory/winpmem.x86.sys
    MemoryDriver.driver_file: binaries/winpmem_i386_1.4.sys
    ClientBuilder.vs_env_script: "%(vs_dir)/VC/bin/vcvars32.bat"
    ClientBuilder.vs_arch: Win32

  MemoryDriver.device_path: \\\\.\\pmem
  MemoryDriver.service_name: pmem
  MemoryDriver.display_name: grr pmem

  Client.install_path: |
    %(SystemRoot|env)\\System32\\%(Client.name)\\%(Client.version_string)

  Client.config_key: Software\\%(Client.name)
  Client.config_hive: HKEY_LOCAL_MACHINE
  Client.config: reg://%(config_hive)/%(config_key)
  Client.binary_name: "%(Client.name).exe"

  Client Context:
    # This is where the client will write back volatile configuration data.
    Config.writeback: reg://%(Client.config_hive)/%(Client.config_key)

  Nanny.service_name: "%(Client.name) Monitor"
  Nanny.service_binary_name: "%(Client.name)service.exe"
  Nanny.service_description: "%(Client.name) Monitor Service"
  Nanny.service_key_hive: "%(config_hive)"
  Nanny.service_key: "%(config_key)\\Nanny"
  Nanny.nanny_binary: |
    %(Client.install_path)\\%(Nanny.service_binary_name)
  Nanny.child_binary: |
    %(Client.install_path)\\%(Client.binary_name)
  Nanny.child_command_line: |
    %(child_binary) --config "%(Client.config)"

  Logging.engines: "stderr,file,event_log"
  Logging.path: |
    %(WINDIR|env)\\System32\\logfiles\\

Platform:Darwin:
  Client.platform: darwin

  Arch:amd64:
    MemoryDriver.driver_file: binaries/OSXPMem-RC1.tar.gz

  MemoryDriver.device_path: /dev/pmem
  MemoryDriver.install_write_path:

  Client.config_file_name: grr.ini
  Client.config_file_path_prefix: /etc
  Client.plist_binary_directory: grr
  Client.plist_binary_name: grrd
  Client.plist_binary_prefix: /usr
  Client.plist_binary_path: |
    %(plist_binary_prefix)/%(plist_binary_directory)/%(plist_binary_name)

  Client.plist_filename: "%(plist_label).plist"
  Client.plist_label_prefix: com
  Client.plist_label: |
    %(plist_label_prefix).google.code.%(plist_binary_name)

  Client.plist_path: /Library/LaunchDaemons/%(plist_filename)
  Client.package_maker_organization: com.google.code

  Logging.engines: stderr,file,syslog
  Logging.syslog_path: localhost:514


Platform:Linux:
  Client.platform: linux
  Client.binary_name: grrd

  MemoryDriver.device_path: /dev/pmem
  MemoryDriver.install_write_path:

  Logging.engines: "stderr,file,syslog"
  Logging.syslog_path: "/dev/log"



