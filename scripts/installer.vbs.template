' Seems to be some kind of turn off all errors in VB
On Error Resume Next


' Configure all the below parameters for your own installation.
basename = "GRR"
package_build = "XX_PACKAGE_BUILD_XX"
basename_text = "GRR"
service_name = "GRR Monitor"
agent_version = "XX_AGENT_VERSION_XX"
service_file = basename & "service.exe"
client_file = basename & ".exe"
install_dir = "%SystemRoot%\system32\" & basename_text & "\" & agent_version & "\"
reg_base = "SOFTWARE\" & basename_text

' Where the HTTP URL of the service is?
location = "XX_LOCATION_XX"

' The CA Certificate we trust
cacert = XX_CACERT_XX

' The public key we trust for running binaries
exec_signing_key = XX_EXEKEY_XX

' The public key we trust for loading drivers
driver_signing_key = XX_DRIVERKEY_XX

Const HKEY_LOCAL_MACHINE = &H80000002

os_bits = GetObject("winmgmts:root\cimv2:Win32_Processor='cpu0'").AddressWidth

' 32 Bit Package Specific Code.
If package_build = "32" Then
  If os_bits = 64 Then
    ' Need to handle 32 bit package being installed on 64 bit system
    ' Over write variables from above.
    install_dir = "%SystemRoot%\syswow64\" & basename_text & "\" & agent_version & "\"
    ' Note that the service will still read the 64 bit registry due to nanny setting KEY_WOW64_64KEY.
  End If
End If



Function RecursivelyCreateDirectory(Path)
  Dim fso: Set fso = Wscript.CreateObject("Scripting.FileSystemObject")
  if fso.FolderExists(Path) Then Exit Function
  Call RecursivelyCreateDirectory(fso.GetParentFolderName(Path))
  fso.CreateFolder(Path)
  End Function

Set objShell = Wscript.CreateObject("WScript.Shell")
Set fso = Wscript.CreateObject("Scripting.FileSystemObject")

' Stop the service first
Set oExec = objShell.Exec("sc stop " & service_name)
Do While oExec.Status = 0
  Wscript.Sleep 100
Loop
  
destination = objShell.ExpandEnvironmentStrings(install_dir)

' Create the output directory if needed.
RecursivelyCreateDirectory(destination)

' Copy into the output directory
fso.CopyFile objShell.CurrentDirectory & "\*.*", destination, TRUE

service_path = destination & service_file
client_path = destination & client_file

' Write the nanny registry keys.
call CreateKey (HKEY_LOCAL_MACHINE, reg_base,64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "ChildBinary", client_path, 64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "ChildCommandLine", client_path, 64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "location", location, 64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "cacert", cacert, 64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "exec_signing_key", exec_signing_key, 64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "driver_signing_key", driver_signing_key, 64)
call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "camode", "production", 64)

' Try to preserve the old certificate from old 32 bit installs if it exists.
if os_bits = 64 Then
  if package_build = "64" Then
    cert_key_path = reg_base & "\certificate"
    old_key_path = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GRR\certificate"
    certificate = objShell.RegRead (old_key_path)
    if certificate <> "" Then
      ' If we found a cert in the old location, we delete it to clean up.
      call WriteRegStr (HKEY_LOCAL_MACHINE, reg_base, "certificate", certificate, 64)
      objShell.RegDelete old_key_path
    end if
  end if
end if


' Install and start the service.
Set oExec = objShell.Exec(service_path & " install")
Do While oExec.Status = 0
  Wscript.Sleep 100
Loop

' Give the service a chance to start.
Wscript.Sleep 500


' Add recovery options to the service.
cmd = "sc failure " & chr(34) & service_name & chr(34) & " reset= 3600 actions= restart/10000/restart/30000/restart/3600000"
Set oExec = objShell.Exec(cmd)
Do While oExec.Status = 0
  Wscript.Sleep 100
Loop

' Registry helper functions.

Function WriteRegStr (RootKey, Key, ValueName, Value, RegType)
    Dim oCtx, oLocator, oReg, oInParams

    Set oCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    oCtx.Add "__ProviderArchitecture", RegType

    Set oLocator = CreateObject("Wbemscripting.SWbemLocator")
    Set oReg = oLocator.ConnectServer("", "root\default", "", "", , , , oCtx).Get("StdRegProv")

    Set oInParams = oReg.Methods_("SetStringValue").InParameters
    oInParams.hDefKey = RootKey
    oInParams.sSubKeyName = Key
    oInParams.sValueName = ValueName
    oInParams.sValue = Value

    call oReg.ExecMethod_("SetStringValue", oInParams, , oCtx)

End Function

Function CreateKey(RootKey, Key, RegType)
    Dim oCtx, oLocator, oReg, oInParams

    Set oCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    oCtx.Add "__ProviderArchitecture", RegType

    Set oLocator = CreateObject("Wbemscripting.SWbemLocator")
    Set oReg = oLocator.ConnectServer("", "root\default", "", "", , , , oCtx).Get("StdRegProv")

    Set oInParams = oReg.Methods_("CreateKey").InParameters
    oInParams.hDefKey = RootKey
    oInParams.sSubKeyName = Key

    call oReg.ExecMethod_("CreateKey", oInParams, , oCtx)

End Function 


