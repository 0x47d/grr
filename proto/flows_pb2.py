# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grr/proto/flows.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)


import grr.proto.jobs_pb2
import grr.proto.knowledge_base_pb2
import grr.proto.semantic_pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='grr/proto/flows.proto',
  package='',
  serialized_pb='\n\x15grr/proto/flows.proto\x1a\x14grr/proto/jobs.proto\x1a\x1egrr/proto/knowledge_base.proto\x1a\x18grr/proto/semantic.proto\"\xc4\x01\n\x08\x41\x43LToken\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x0e\n\x06reason\x18\x02 \x01(\t\x12\x18\n\x10requested_access\x18\x03 \x01(\t\x12\x41\n\x06\x65xpiry\x18\x05 \x01(\x03\x42\x31\xe2\xfc\xe3\xc4\x01+\n\x0bRDFDatetime\x12\x1cWhen does this token expire?\x12\x12\n\nsource_ips\x18\x06 \x03(\t\x12\x0f\n\x07process\x18\x07 \x01(\t\x12\x14\n\x0cis_emergency\x18\x08 \x01(\x08\"\xe9\n\n\x0e\x46lowRunnerArgs\x12\x61\n\x08priority\x18\x01 \x01(\x0e\x32\x14.GrrMessage.Priority:\x0fMEDIUM_PRIORITYB(\xe2\xfc\xe3\xc4\x01\"\x12 The priority used for this flow.\x12k\n\x0enotify_to_user\x18\x02 \x01(\x08:\x04trueBM\xe2\xfc\xe3\xc4\x01G\x12/Should a notification be sent to the initiator.\"\x14Notify at Completion\x12g\n\x0csend_replies\x18\x03 \x01(\x08:\x04trueBK\xe2\xfc\xe3\xc4\x01\x45\x12\x33Should send replies back to the parent flow or not.\x18\x02\"\x0cSend Replies\x12\x9e\x01\n\x12notification_event\x18\x04 \x01(\tB\x81\x01\xe2\xfc\xe3\xc4\x01{\x12\x63\x41n event listener\'s event name. An event will be published to this listener once the flow finishes.\x18\x02\"\x12Notification Event\x12\x88\x01\n\x10notification_urn\x18\x0e \x01(\tBn\xe2\xfc\xe3\xc4\x01h\n\tSessionID\x12YThe Session ID for the event listener to receive a notification when this flow completes.\x18\x02\x12L\n\tclient_id\x18\x05 \x01(\tB9\xe2\xfc\xe3\xc4\x01\x33\n\tClientURN\x12$The client id this flow operates on.\x18\x02\x12\x42\n\x05queue\x18\x06 \x01(\t:\x01WB0\xe2\xfc\xe3\xc4\x01*\n\x06RDFURN\x12\x1eThe queue to use for the flow.\x18\x02\x12H\n\x08\x65vent_id\x18\x07 \x01(\tB6\xe2\xfc\xe3\xc4\x01\x30\x12,A logging event id for issuing further logs.\x18\x02\x12Q\n\x05token\x18\x08 \x01(\x0b\x32\t.ACLTokenB7\xe2\xfc\xe3\xc4\x01\x31\x12-The access token to be used for this request.\x18\x02\x12Q\n\tcpu_limit\x18\t \x01(\x04\x42>\xe2\xfc\xe3\xc4\x01\x38\x12\x34\x41 limit on the client cpu seconds used by this flow.\x18\x01\x12V\n\x13network_bytes_limit\x18\r \x01(\x04\x42\x39\xe2\xfc\xe3\xc4\x01\x33\x12/A limit on the total traffic used by this flow.\x18\x01\x12U\n\rrequest_state\x18\n \x01(\x0b\x32\r.RequestStateB/\xe2\xfc\xe3\xc4\x01)\x12%The request state of the parent flow.\x18\x02\x12P\n\tflow_name\x18\x0b \x01(\tB=\xe2\xfc\xe3\xc4\x01\x37\x12\x33The name of the class implementing the flow to run.\x18\x02\x12o\n\x0f\x62\x61se_session_id\x18\x0c \x01(\tBV\xe2\xfc\xe3\xc4\x01P\n\tSessionID\x12\x41The session id for the flow runner. If not specified we make one.\x18\x02\"\x9b\x0b\n\x0eHuntRunnerArgs\x12N\n\thunt_name\x18\x01 \x01(\tB;\xe2\xfc\xe3\xc4\x01\x35\x12\x33The name of the class implementing the hunt to run.\x12:\n\x0b\x64\x65scription\x18\x02 \x01(\tB%\xe2\xfc\xe3\xc4\x01\x1f\x12\x1dThe description of this hunt.\x12x\n\x0bregex_rules\x18\x03 \x03(\x0b\x32\x16.ForemanAttributeRegexBK\xe2\xfc\xe3\xc4\x01\x45\x12\x43Regex rules that trigger this hunt. Note that all rules must match.\x12s\n\rinteger_rules\x18\x04 \x03(\x0b\x32\x18.ForemanAttributeIntegerBB\xe2\xfc\xe3\xc4\x01<\x12:Integer rules that trigger this hunt.All rules must match.\x12\x63\n\x08priority\x18\x05 \x01(\x0e\x32\x14.GrrMessage.Priority:\x0fMEDIUM_PRIORITYB*\xe2\xfc\xe3\xc4\x01$\x12 The priority used for this flow.\x18\x01\x12\xa4\x01\n\x12notification_event\x18\x06 \x01(\tB\x87\x01\xe2\xfc\xe3\xc4\x01\x80\x01\x12hAn event name for an event listener. An event will be published to this listener once the flow finishes.\x18\x02\"\x12Notification Event\x12\x42\n\x05queue\x18\x07 \x01(\t:\x01WB0\xe2\xfc\xe3\xc4\x01*\n\x06RDFURN\x12\x1eThe queue to use for the flow.\x18\x02\x12Q\n\x05token\x18\x08 \x01(\x0b\x32\t.ACLTokenB7\xe2\xfc\xe3\xc4\x01\x31\x12-The access token to be used for this request.\x18\x02\x12Q\n\tcpu_limit\x18\t \x01(\x04\x42>\xe2\xfc\xe3\xc4\x01\x38\x12\x34\x41 limit on the client cpu seconds used by this flow.\x18\x01\x12V\n\x13network_bytes_limit\x18\r \x01(\x04\x42\x39\xe2\xfc\xe3\xc4\x01\x33\x12/A limit on the total traffic used by this flow.\x18\x01\x12\xea\x01\n\x0c\x63lient_limit\x18\n \x01(\x04:\x01\x30\x42\xd0\x01\xe2\xfc\xe3\xc4\x01\xc9\x01\x12\xb8\x01Maximum number of clients participating in the hunt. Note that this limit can be overshot by a small number of clients if there are multiple workers running. Use this only for testing.\"\x0c\x43lient Limit\x12R\n\x0b\x65xpiry_time\x18\x0b \x01(\t:\x03\x33\x31\x64\x42\x38\xe2\xfc\xe3\xc4\x01\x32\n\x08\x44uration\x12\x19\x45xpiry time for the hunt.\"\x0b\x45xpiry Time\x12P\n\x05state\x18\x0c \x01(\x0e\x32\x15.HuntRunnerArgs.State:\x07STOPPEDB!\xe2\xfc\xe3\xc4\x01\x1b\x12\x17The state of this hunt.\x18\x02\"-\n\x05State\x12\x0b\n\x07STOPPED\x10\x00\x12\x0b\n\x07STARTED\x10\x01\x12\n\n\x06PAUSED\x10\x02\"W\n\x0eSampleHuntArgs\x12\x45\n\x08\x66ilename\x18\x01 \x01(\t:\r/tmp/evil.txtB$\xe2\xfc\xe3\xc4\x01\x1e\x12\x1c\x65vil filename to search for.\"\xce\x02\n\x0b\x46lowRequest\x12H\n\nclient_ids\x18\x01 \x03(\tB4\xe2\xfc\xe3\xc4\x01.\n\tClientURN\x12!The clients to start the flow on.\x12\xac\x01\n\x04\x61rgs\x18\x05 \x01(\x0c\x42\x9d\x01\xe2\xfc\xe3\xc4\x01\x96\x01\x12\x81\x01\x41rgs to the flow. These depend on the flow_name parameter.It is expected that this field contains an instance of flow\'s arg_type.*\x10GetFlowArgsClass\x12\x46\n\x0brunner_args\x18\x06 \x01(\x0b\x32\x0f.FlowRunnerArgsB \xe2\xfc\xe3\xc4\x01\x1a\x12\x18\x41rgs to the flow runner.\"\xd3\x01\n\x0cOutputPlugin\x12;\n\x0bplugin_name\x18\x01 \x01(\tB&\xe2\xfc\xe3\xc4\x01 \x12\x1eThe name of the output plugin.\x12\x85\x01\n\x0bplugin_args\x18\x02 \x01(\x0c\x42p\xe2\xfc\xe3\xc4\x01j\x12TThe parameters for this plugin. Must be an instance of the named plugin\'s args_type.*\x12GetPluginArgsClass\"\x88\x01\n\x0f\x45mailPluginArgs\x12[\n\x05\x65mail\x18\x01 \x01(\tBL\xe2\xfc\xe3\xc4\x01\x46\n\x12\x44omainEmailAddress\x12\x30The email address that messages will be sent to.\x12\x18\n\x0b\x65mail_limit\x18\x02 \x01(\x04:\x03\x31\x30\x30\"\x80\x01\n\x14\x43ollectionPluginArgs\x12h\n\x0f\x63ollection_name\x18\x01 \x01(\t:\x07ResultsBF\xe2\xfc\xe3\xc4\x01@\x12+The name of the collection within the hunt.\x18\x01\"\x0f\x43ollection Name\"\xd2\x01\n\x17VariableGenericHuntArgs\x12^\n\x05\x66lows\x18\x01 \x03(\x0b\x32\x0c.FlowRequestBA\xe2\xfc\xe3\xc4\x01;\x12\x39\x41 list of requests for starting flows on certain clients.\x12W\n\x0eoutput_plugins\x18\x02 \x03(\x0b\x32\r.OutputPluginB0\xe2\xfc\xe3\xc4\x01*\x12(The output plugins to use for this hunt.\"I\n\x0bMBRHuntArgs\x12:\n\x06length\x18\x01 \x01(\x04:\x04\x34\x30\x39\x36\x42$\xe2\xfc\xe3\xc4\x01\x1e\x12\x1cNumber of bytes to retrieve.\"\xca\x02\n\x0fGenericHuntArgs\x12\x80\x01\n\tflow_args\x18\x02 \x01(\x0c\x42m\xe2\xfc\xe3\xc4\x01g\x12QArguments to the flow to run. This should be an instance of flow.args_type proto.\x18\x02*\x10GetFlowArgsClass\x12[\n\x10\x66low_runner_args\x18\x03 \x01(\x0b\x32\x0f.FlowRunnerArgsB0\xe2\xfc\xe3\xc4\x01*\x12(The runner args for launching each flow.\x12W\n\x0eoutput_plugins\x18\x04 \x03(\x0b\x32\r.OutputPluginB0\xe2\xfc\xe3\xc4\x01*\x12(The output plugins to use for this hunt.\"]\n\rCAEnrolerArgs\x12L\n\x03\x63sr\x18\x01 \x01(\tB?\xe2\xfc\xe3\xc4\x01\x39\n\x0b\x43\x65rtificate\x12*A Certificate RDFValue with the CSR in it.\"\xa4\x02\n\x16\x44\x65leteGRRTempFilesArgs\x12\x89\x02\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB\xeb\x01\xe2\xfc\xe3\xc4\x01\xe4\x01\x12\xe1\x01The pathspec target for deletion.If path is a directory, look in the top level for filenames beginning with Client.tempfile_prefix, and delete them. If path is a regular file and starts with Client.tempfile_prefix, delete it.\"?\n\rUninstallArgs\x12.\n\x04kill\x18\x01 \x01(\x08\x42 \xe2\xfc\xe3\xc4\x01\x1a\x12\x18Kills the client if set.\"Y\n\x10UpdateConfigArgs\x12\x45\n\x06\x63onfig\x18\x01 \x01(\x0b\x32\n.GRRConfigB)\xe2\xfc\xe3\xc4\x01#\x12!The config to send to the client.\"\x8c\x01\n\x15\x45xecutePythonHackArgs\x12;\n\thack_name\x18\x01 \x01(\tB(\xe2\xfc\xe3\xc4\x01\"\x12 The name of the hack to execute.\x12\x36\n\x07py_args\x18\x02 \x01(\x0b\x32\x05.DictB\x1e\xe2\xfc\xe3\xc4\x01\x18\x12\x16Python Hack Arguments.\"\xd8\x01\n\x12\x45xecuteCommandArgs\x12\x15\n\x03\x63md\x18\x01 \x01(\tB\x08\xe2\xfc\xe3\xc4\x01\x02\x12\x00\x12S\n\x0c\x63ommand_line\x18\x02 \x01(\tB=\xe2\xfc\xe3\xc4\x01\x37\x12\x35The arguments to the command as a shell command line.\x12V\n\ntime_limit\x18\x03 \x01(\x03:\x02-1B>\xe2\xfc\xe3\xc4\x01\x38\x12\x36The time limit for this execution, -1 means unlimited.\"\x93\x01\n\x16OnlineNotificationArgs\x12y\n\x05\x65mail\x18\x01 \x01(\tBj\xe2\xfc\xe3\xc4\x01\x64\n\x12\x44omainEmailAddress\x12NEmail address to send to. If not set, mail will be sent to the logged in user.\"o\n\x10UpdateClientArgs\x12[\n\tblob_path\x18\x01 \x01(\tBH\xe2\xfc\xe3\xc4\x01\x42\n\x06RDFURN\x12\x38\x41n aff4 path to a GRRSignedBlob of a new client version.\"q\n\rKeepAliveArgs\x12`\n\x08\x64uration\x18\x01 \x01(\t:\x02\x31hBJ\xe2\xfc\xe3\xc4\x01\x44\n\x08\x44uration\x12\x38Until when should the client stay in the fast poll mode.\"\x8c\x01\n\x11TerminateFlowArgs\x12\x46\n\x08\x66low_urn\x18\x01 \x01(\tB4\xe2\xfc\xe3\xc4\x01.\n\tSessionID\x12!The URN of the flow to terminate.\x12/\n\x06reason\x18\x02 \x01(\tB\x1f\xe2\xfc\xe3\xc4\x01\x19\x12\x17Reason for termination.\"\x9e\x01\n\x10LaunchBinaryArgs\x12\x41\n\x06\x62inary\x18\x01 \x01(\tB1\xe2\xfc\xe3\xc4\x01+\n\x06RDFURN\x12!The URN of the binary to execute.\x12G\n\x0c\x63ommand_line\x18\x02 \x01(\tB1\xe2\xfc\xe3\xc4\x01+\x12)Binary Arguments as a shell command line.\"\xca\x04\n WinUserActivityInvestigationArgs\x12<\n\x08username\x18\x01 \x01(\tB*\xe2\xfc\xe3\xc4\x01$\x12\"The user to target the actions to.\x12R\n\x13get_browser_history\x18\x02 \x01(\x08:\x04trueB/\xe2\xfc\xe3\xc4\x01)\x12\'Call each of the browser history flows.\x12\\\n\x16recursive_list_homedir\x18\x03 \x01(\x04:\x01\x35\x42\x39\xe2\xfc\xe3\xc4\x01\x33\x12\x31Recursively list the users homedir to this depth.\x12Z\n\x1crecursive_list_user_registry\x18\x04 \x01(\x04:\x01\x35\x42\x31\xe2\xfc\xe3\xc4\x01+\x12)Recursively list the users registry hive.\x12\x38\n\rartifact_list\x18\x05 \x03(\tB!\xe2\xfc\xe3\xc4\x01\x1b\x12\x19\x41 list of Artifact names.\x12\\\n\x17timeline_collected_data\x18\x06 \x01(\x08:\x04trueB5\xe2\xfc\xe3\xc4\x01/\x12-Once complete create a timeline for the host.\x12\x42\n\x07use_tsk\x18\x07 \x01(\x08\x42\x31\xe2\xfc\xe3\xc4\x01+\x12)Use raw filesystem access where possible.\"\xda\x05\n\x19\x41rtifactCollectorFlowArgs\x12>\n\rartifact_list\x18\x01 \x03(\tB\'\xe2\xfc\xe3\xc4\x01!\x12\x1f\x41 list of Artifact class names.\x12L\n\x07use_tsk\x18\x02 \x01(\x08:\x04trueB5\xe2\xfc\xe3\xc4\x01/\x12-Whether raw filesystem access should be used.\x12\x8c\x01\n\x15store_results_in_aff4\x18\x03 \x01(\x08:\x04trueBg\xe2\xfc\xe3\xc4\x01\x61\x12_Should the collected artifacts be written to the GRR AFF4 namespace based on the AFF4->RDF map.\x12}\n\x06output\x18\x04 \x01(\tBm\xe2\xfc\xe3\xc4\x01g\x12\x65If set, a relative URN to write each result to. This will create the collection if it does not exist.\x12\x90\x01\n\x18split_output_by_artifact\x18\x05 \x01(\x08:\x05\x66\x61lseBg\xe2\xfc\xe3\xc4\x01\x61\x12_If True, use output as a directory and write a separate collection for each artifact collected.\x12\x8d\x01\n\x0eknowledge_base\x18\x06 \x01(\x0b\x32\x0e.KnowledgeBaseBe\xe2\xfc\xe3\xc4\x01_\x12[An optional knowledge base to use, if not specified we retrieve one from the client object.\x18\x02\"i\n\x0fInterrogateArgs\x12V\n\x0blightweight\x18\x01 \x01(\x08:\x05\x66\x61lseB:\xe2\xfc\xe3\xc4\x01\x34\x12\x32Perform a light weight version of the interrogate.\"\xdf\x02\n\x11\x46\x65tchAllFilesArgs\x12\x92\x01\n\x08\x66indspec\x18\x01 \x01(\x0b\x32\t.FindSpecBu\xe2\xfc\xe3\xc4\x01o\x12mWhich files to search for. The default is to search the entire system for files with an executable extension.\x12\xb4\x01\n\x0fiteration_count\x18\x02 \x01(\x04:\x05\x31\x30\x30\x30\x30\x42\x93\x01\xe2\xfc\xe3\xc4\x01\x8c\x01\x12\x89\x01\x46iles examined per iteration before reporting back to the server. Should be large enough to make the  roundtrip to the server worthwhile.\"Y\n\x13\x46ingerprintFileArgs\x12\x42\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB%\xe2\xfc\xe3\xc4\x01\x1f\x12\x1dThe file path to fingerprint.\"\xd4\x01\n\x0fImageMemoryArgs\x12\xc0\x01\n\x10\x64river_installer\x18\x01 \x01(\x0b\x32\x16.DriverInstallTemplateB\x8d\x01\xe2\xfc\xe3\xc4\x01\x86\x01\x12\x81\x01\x41n optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\x18\x02\"\x8d\x03\n\x17\x44ownloadMemoryImageArgs\x12\xa6\x01\n\x07\x64\x65stdir\x18\x01 \x01(\tB\x94\x01\xe2\xfc\xe3\xc4\x01\x8d\x01\x12\x8a\x01\x44\x65stination directory on the client for the temporary image. Leave blank to use defaults. Parent directories will be created if necessary.\x12\x31\n\x06offset\x18\x02 \x01(\x04:\x01\x30\x42\x1e\xe2\xfc\xe3\xc4\x01\x18\x12\x16Memory offset in bytes\x12P\n\x06length\x18\x03 \x01(\x04:\x01\x30\x42=\xe2\xfc\xe3\xc4\x01\x37\x12\x35Number of bytes to copy (default 0 copies all memory)\x12\x44\n\x04gzip\x18\x04 \x01(\x08:\x04trueB0\xe2\xfc\xe3\xc4\x01*\x12(Gzip temporary image file on the client.\"\xca\x02\n\x14LoadMemoryDriverArgs\x12\xc0\x01\n\x10\x64river_installer\x18\x01 \x01(\x0b\x32\x16.DriverInstallTemplateB\x8d\x01\xe2\xfc\xe3\xc4\x01\x86\x01\x12\x81\x01\x41n optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\x18\x02\x12o\n\x10reload_if_loaded\x18\x02 \x01(\x08:\x05\x66\x61lseBN\xe2\xfc\xe3\xc4\x01H\x12-If the driver is already loaded we reload it.\"\x17\x46orce reload of driver.\"\xa0\x04\n\x17\x41nalyzeClientMemoryArgs\x12\xbe\x01\n\x10\x64river_installer\x18\x01 \x01(\x0b\x32\x16.DriverInstallTemplateB\x8b\x01\xe2\xfc\xe3\xc4\x01\x84\x01\x12\x81\x01\x41n optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\x12]\n\x07request\x18\x02 \x01(\x0b\x32\x12.VolatilityRequestB8\xe2\xfc\xe3\xc4\x01\x32\x12\x30\x41 request for the client\'s volatility subsystem.\x12\xe4\x01\n\x06output\x18\x03 \x01(\t:\x14\x61nalysis/{p}/{u}-{t}B\xbd\x01\xe2\xfc\xe3\xc4\x01\xb6\x01\x12\xb3\x01The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.\"\xee\x01\n\x0eGrepMemoryArgs\x12P\n\x07request\x18\x01 \x01(\x0b\x32\t.GrepSpecB4\xe2\xfc\xe3\xc4\x01.\n\x0c\x42\x61reGrepSpec\x12\x1e\x41 grepspec for memory devices.\x12\x45\n\x06output\x18\x02 \x01(\t:\x15\x61nalysis/grep/{u}-{t}B\x1e\xe2\xfc\xe3\xc4\x01\x18\x12\x16The output collection.:C\xda\xfc\xe3\xc4\x01=\n;A grep specification which operates only on memory devices.\"\x8d\x01\n\x18GetProcessesBinariesArgs\x12q\n\x06output\x18\x01 \x01(\t:\'analysis/get-processes-binaries/{u}-{t}B8\xe2\xfc\xe3\xc4\x01\x32\x12\x30\x41 path relative to the client to put the output.\"\xba\x02\n\"GetProcessesBinariesVolatilityArgs\x12q\n\x06output\x18\x01 \x01(\t:\'analysis/get-processes-binaries/{u}-{t}B8\xe2\xfc\xe3\xc4\x01\x32\x12\x30\x41 path relative to the client to put the output.\x12|\n\x0e\x66ilename_regex\x18\x02 \x01(\t:\x01.Ba\xe2\xfc\xe3\xc4\x01[\n\x11RegularExpression\x12\x36Regex used to filter the list of binaries to download.\"\x0e\x46ilename Regex\x12#\n\x07request\x18\x03 \x01(\x0b\x32\x12.VolatilityRequest\"\xcb\x01\n\x13SophosCollectorArgs\x12\x46\n\x08pathtype\x18\x01 \x01(\x0e\x32\x12.PathSpec.PathTypeB \xe2\xfc\xe3\xc4\x01\x1a\x12\x18The requested path type.\x12l\n\x06output\x18\x02 \x01(\t:\x17\x61nalysis/sophos/{u}-{t}BC\xe2\xfc\xe3\xc4\x01=\x12;If set, a path relative to the client URN to store results.\"\xd1\x01\n\x0cMACTimesArgs\x12Q\n\x04path\x18\x01 \x01(\t:\x04/fs/B=\xe2\xfc\xe3\xc4\x01\x37\x12\x35\x41n AFF path (relative to the client area of the VFS).\x12n\n\x06output\x18\x02 \x01(\t:\x19\x61nalysis/mactimes/{u}-{t}BC\xe2\xfc\xe3\xc4\x01=\x12;If set, a path relative to the client URN to store results.\"\xca\x01\n\x11\x46ileCollectorArgs\x12\x44\n\tfindspecs\x18\x01 \x03(\x0b\x32\t.FindSpecB&\xe2\xfc\xe3\xc4\x01 \x12\x1e\x41 list of find specifications.\x12o\n\x06output\x18\x02 \x01(\t:\x1a\x61nalysis/collector/{u}-{t}BC\xe2\xfc\xe3\xc4\x01=\x12;If set, a path relative to the client URN to store results.\"\xa7\x02\n\x15VolatilityPluginsArgs\x12]\n\x07request\x18\x01 \x01(\x0b\x32\x12.VolatilityRequestB8\xe2\xfc\xe3\xc4\x01\x32\x12\x30\x41 request for the client\'s volatility subsystem.\x12i\n\x06output\x18\x02 \x01(\t:\x14\x61nalysis/{p}/{u}-{t}BC\xe2\xfc\xe3\xc4\x01=\x12;If set, a path relative to the client URN to store results.\x12\x44\n\x07plugins\x18\x03 \x03(\tB3\xe2\xfc\xe3\xc4\x01-\n\x10VolatilityPlugin\x12\x19\x41 list of plugins to run.\"\xb0\x04\n\x12\x46irefoxHistoryArgs\x12I\n\x08pathtype\x18\x01 \x01(\x0e\x32\x12.PathSpec.PathTypeB#\xe2\xfc\xe3\xc4\x01\x1d\x12\x1bType of path access to use.\x12Z\n\x0bget_archive\x18\x02 \x01(\x08:\x05\x66\x61lseB>\xe2\xfc\xe3\xc4\x01\x38\x12\x36Should we get Archived History as well (3 months old).\x12\xaa\x01\n\x08username\x18\x03 \x01(\tB\x97\x01\xe2\xfc\xe3\xc4\x01\x90\x01\x12\x8d\x01The user to get history for. If history_path is not set this will be used to guess the path to the history files. Can be in form DOMAIN\\user.\x12m\n\x06output\x18\x04 \x01(\t:\x18\x61nalysis/firefox-{u}-{t}BC\xe2\xfc\xe3\xc4\x01=\x12;If set, a path relative to the client URN to store results.\x12W\n\x0chistory_path\x18\x05 \x01(\tBA\xe2\xfc\xe3\xc4\x01;\x12\x39Path to a profile directory that contains a History file.\"\xac\x04\n\rCacheGrepArgs\x12V\n\ngrep_users\x18\x01 \x03(\tBB\xe2\xfc\xe3\xc4\x01<\x12:A list of users to check. Default all users on the system.\x12I\n\x08pathtype\x18\x02 \x01(\x0e\x32\x12.PathSpec.PathTypeB#\xe2\xfc\xe3\xc4\x01\x1d\x12\x1bType of path access to use.\x12R\n\ndata_regex\x18\x03 \x01(\tB>\xe2\xfc\xe3\xc4\x01\x38\n\x11RegularExpression\x12#A regular expression to search for.\x12o\n\x06output\x18\x04 \x01(\t:\x1a\x61nalysis/CacheGrep/{u}-{t}BC\xe2\xfc\xe3\xc4\x01=\x12;If set, a path relative to the client URN to store results.\x12\x30\n\x0c\x63heck_chrome\x18\x05 \x01(\x08:\x04trueB\x14\xe2\xfc\xe3\xc4\x01\x0e\x12\x0c\x43heck Chrome\x12\x32\n\rcheck_firefox\x18\x06 \x01(\x08:\x04trueB\x15\xe2\xfc\xe3\xc4\x01\x0f\x12\rCheck Firefox\x12M\n\x08\x63heck_ie\x18\x07 \x01(\x08:\x04trueB5\xe2\xfc\xe3\xc4\x01/\x12-Check Internet Explorer (Not implemented yet)\"\xa1\x02\n\x15\x44ownloadDirectoryArgs\x12P\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB3\xe2\xfc\xe3\xc4\x01-\x12+The pathspec for the directory to download.\x12\x33\n\x05\x64\x65pth\x18\x02 \x01(\x04:\x02\x31\x30\x42 \xe2\xfc\xe3\xc4\x01\x1a\x12\x18Maximum recursion depth.\x12\x80\x01\n\rignore_errors\x18\x03 \x01(\x08:\x05\x66\x61lseBb\xe2\xfc\xe3\xc4\x01\\\x12ZIf True, we do not raise an error in the casethat a directory or file cannot be not found.\"a\n\x11ListDirectoryArgs\x12L\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB/\xe2\xfc\xe3\xc4\x01)\x12\'The pathspec for the directory to list.\"\xa2\x01\n\x1aRecursiveListDirectoryArgs\x12L\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB/\xe2\xfc\xe3\xc4\x01)\x12\'The pathspec for the directory to list.\x12\x36\n\tmax_depth\x18\x02 \x01(\x04:\x01\x35\x42 \xe2\xfc\xe3\xc4\x01\x1a\x12\x18Maximum recursion depth.\"P\n\x0fSlowGetFileArgs\x12\x1b\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpec\x12 \n\x0f\x61\x66\x66\x34_chunk_size\x18\x02 \x01(\x04:\x07\x31\x30\x34\x38\x35\x37\x36\"m\n\x08GrepArgs\x12\x1a\n\x07request\x18\x01 \x01(\x0b\x32\t.GrepSpec\x12\x45\n\x06output\x18\x02 \x01(\t:\x15\x61nalysis/grep/{u}-{t}B\x1e\xe2\xfc\xe3\xc4\x01\x18\x12\x16The output collection.\"\xb3\x01\n\x08GlobArgs\x12]\n\x05paths\x18\x01 \x03(\tBN\xe2\xfc\xe3\xc4\x01H\n\x0eGlobExpression\x12\x36\x41 list of paths to glob that can contain %% expansions\x12H\n\x08pathtype\x18\x02 \x01(\x0e\x32\x12.PathSpec.PathTypeB\"\xe2\xfc\xe3\xc4\x01\x1c\x12\x1aType of access to glob in.\"\xe2\x02\n\x0fGlobAndGrepArgs\x12T\n\x05paths\x18\x01 \x03(\tBE\xe2\xfc\xe3\xc4\x01?\n\x0eGlobExpression\x12-A path to glob that can contain %% expansions\x12H\n\x08pathtype\x18\x02 \x01(\x0e\x32\x12.PathSpec.PathTypeB\"\xe2\xfc\xe3\xc4\x01\x1c\x12\x1aType of access to glob in.\x12G\n\x04grep\x18\x03 \x01(\x0b\x32\t.GrepSpecB.\xe2\xfc\xe3\xc4\x01(\n\x0c\x42\x61reGrepSpec\x12\x18The parameters for grep.\x12\x66\n\x06output\x18\x04 \x01(\t:\x1c\x61nalysis/GlobAndGrep/{u}-{t}B8\xe2\xfc\xe3\xc4\x01\x32\x12\x30\x41 path relative to the client to put the output.\"\xc6\x02\n\rFindFilesArgs\x12\x44\n\x08\x66indspec\x18\x01 \x01(\x0b\x32\t.FindSpecB\'\xe2\xfc\xe3\xc4\x01!\x12\x1f\x41 find operation specification.\x12_\n\x06output\x18\x02 \x01(\t:\x15\x61nalysis/find/{u}-{t}B8\xe2\xfc\xe3\xc4\x01\x32\x12\x30\x41 path relative to the client to put the output.\x12\x45\n\x0bmax_results\x18\x03 \x01(\x04:\x03\x35\x30\x30\x42+\xe2\xfc\xe3\xc4\x01%\x12!Maximum number of results to get.\x18\x01\x12G\n\x0fiteration_count\x18\x04 \x01(\x04:\x05\x32\x30\x30\x30\x30\x42\'\xe2\xfc\xe3\xc4\x01!\x12\x1d\x46iles examined per iteration.\x18\x01\"\xcf\x01\n\x0bGetFileArgs\x12K\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB.\xe2\xfc\xe3\xc4\x01(\x12&The pathspec for the file to retrieve.\x12s\n\x0bread_length\x18\x02 \x01(\x04:\x01\x30\x42[\xe2\xfc\xe3\xc4\x01U\x12QThe amount of data to read from the file. If 0 we use the value from a stat call.\x18\x01\"Q\n\nGetMBRArgs\x12\x43\n\x06length\x18\x01 \x01(\x04:\x04\x34\x30\x39\x36\x42-\xe2\xfc\xe3\xc4\x01\'\x12%The length of the MBR buffer to read.\"\xaf\x01\n\x12\x46ileDownloaderArgs\x12L\n\tfindspecs\x18\x01 \x03(\x0b\x32\t.FindSpecB.\xe2\xfc\xe3\xc4\x01(\x12&List of find specifications to search.\x12K\n\tpathspecs\x18\x02 \x03(\x0b\x32\t.PathSpecB-\xe2\xfc\xe3\xc4\x01\'\x12%List of path specifications to fetch.\"\x93\x04\n\x11\x43hromeHistoryArgs\x12I\n\x08pathtype\x18\x01 \x01(\x0e\x32\x12.PathSpec.PathTypeB#\xe2\xfc\xe3\xc4\x01\x1d\x12\x1bType of path access to use.\x12S\n\x0bget_archive\x18\x02 \x01(\x08\x42>\xe2\xfc\xe3\xc4\x01\x38\x12\x36Should we get Archived History as well (3 months old).\x12\xb1\x01\n\x08username\x18\x03 \x01(\tB\x9e\x01\xe2\xfc\xe3\xc4\x01\x97\x01\x12\x94\x01The user to get Chrome history for. If history_path is not set this will be used to guess the path to the history files. Can be in form DOMAIN\\user.\x12Q\n\x06output\x18\x04 \x01(\tBA\xe2\xfc\xe3\xc4\x01;\x12\x39Path to a profile directory that contains a History file.\x12W\n\x0chistory_path\x18\x05 \x01(\tBA\xe2\xfc\xe3\xc4\x01;\x12\x39Path to a profile directory that contains a History file.\"\xd1\x03\n\x0cSendFileArgs\x12K\n\x08pathspec\x18\x01 \x01(\x0b\x32\t.PathSpecB.\xe2\xfc\xe3\xc4\x01(\x12&The pathspec for the file to retrieve.\x12\x39\n\x04host\x18\x02 \x01(\tB+\xe2\xfc\xe3\xc4\x01%\x12#Hostname or IP to send the file to.\x12\x41\n\x04port\x18\x03 \x01(\x04:\x05\x31\x32\x33\x34\x35\x42,\xe2\xfc\xe3\xc4\x01&\x12$Port number on the listening server.\x12j\n\x0e\x61\x64\x64ress_family\x18\x04 \x01(\x0e\x32\x16.NetworkAddress.Family:\x04INETB4\xe2\xfc\xe3\xc4\x01.\x12,address family to use (AF_INET or AF_INET6).\x12\x43\n\x03key\x18\x05 \x01(\tB6\xe2\xfc\xe3\xc4\x01\x30\x12.An encryption key given in hex representation.\x12\x45\n\x02iv\x18\x06 \x01(\tB9\xe2\xfc\xe3\xc4\x01\x33\x12\x31The iv for AES, also given in hex representation.\"\xca\x02\n\x10\x43lientActionArgs\x12.\n\x06\x61\x63tion\x18\x01 \x01(\tB\x1e\xe2\xfc\xe3\xc4\x01\x18\x12\x16The action to execute.\x12\x63\n\x07save_to\x18\x02 \x01(\t:\x04/tmpBL\xe2\xfc\xe3\xc4\x01\x46\x12\x44If set, interpreted as a path to write pickle dumps of responses to.\x12V\n\tbreak_pdb\x18\x03 \x01(\x08:\x05\x66\x61lseB<\xe2\xfc\xe3\xc4\x01\x36\x12\x34If True, run pdb.set_trace when responses come back.\x12I\n\x0b\x61\x63tion_args\x18\x04 \x01(\x0c\x42\x34\xe2\xfc\xe3\xc4\x01.\x12\x18\x43lient action arguments.*\x12GetActionArgsClass\"\x83\x03\n\x14\x43onsoleDebugFlowArgs\x12*\n\x04\x66low\x18\x01 \x01(\tB\x1c\xe2\xfc\xe3\xc4\x01\x16\x12\x14The flow to execute.\x12i\n\x07save_to\x18\x02 \x01(\t:\x04/tmpBR\xe2\xfc\xe3\xc4\x01L\x12JIf not None, interpreted as an path to write pickle dumps of responses to.\x12V\n\tbreak_pdb\x18\x03 \x01(\x08:\x05\x66\x61lseB<\xe2\xfc\xe3\xc4\x01\x36\x12\x34If True, run pdb.set_trace when responses come back.\x12>\n\x0fprint_responses\x18\x04 \x01(\x08\x42%\xe2\xfc\xe3\xc4\x01\x1f\x12\x1dIf True, print each response.\x12<\n\tflow_args\x18\x05 \x01(\x0c\x42)\xe2\xfc\xe3\xc4\x01#\x12\x0f\x46low arguments.*\x10GetFlowArgsClass\"k\n\x19\x43reateGenericHuntFlowArgs\x12)\n\x10hunt_runner_args\x18\x01 \x01(\x0b\x32\x0f.HuntRunnerArgs\x12#\n\thunt_args\x18\x02 \x01(\x0b\x32\x10.GenericHuntArgs\"\xa6\x03\n\x15\x43reateCronJobFlowArgs\x12J\n\x0b\x64\x65scription\x18\x01 \x01(\tB5\xe2\xfc\xe3\xc4\x01/\x12-A human readable description of the cron job.\x12\x46\n\x0bperiodicity\x18\x02 \x01(\t:\x02\x37\x64\x42-\xe2\xfc\xe3\xc4\x01\'\n\x08\x43ronSpec\x12\x1bHow often to run this hunt.\x12)\n\x10\x66low_runner_args\x18\x03 \x01(\x0b\x32\x0f.FlowRunnerArgs\x12+\n\tflow_args\x18\x04 \x01(\x0c\x42\x18\xe2\xfc\xe3\xc4\x01\x12*\x10GetFlowArgsClass\x12\x16\n\x0e\x61llow_overruns\x18\x05 \x01(\x08\x12\x88\x01\n\x08lifetime\x18\x06 \x01(\x04:\x01\x30\x42s\xe2\xfc\xe3\xc4\x01m\n\x08\x44uration\x12\x61How long each run of the cron should be allowed to run. Runs that exceed lifetime will be killed.\"\xb4\x01\n\x12ModifyHuntFlowArgs\x12?\n\x08hunt_urn\x18\x01 \x01(\tB-\xe2\xfc\xe3\xc4\x01\'\n\x06RDFURN\x12\x1dThe URN of the hunt to pause.\x12\x14\n\x0c\x63lient_limit\x18\x02 \x01(\x04\x12G\n\x0b\x65xpiry_time\x18\x03 \x01(\tB2\xe2\xfc\xe3\xc4\x01,\n\x0bRDFDatetime\x12\x1dWhen should this hunt expire?\"\xc6\x02\n\x15ManageCronJobFlowArgs\x12\x34\n\x03urn\x18\x01 \x01(\tB\'\xe2\xfc\xe3\xc4\x01!\n\x06RDFURN\x12\x17The URN of the cron job\x12\x33\n\x06\x61\x63tion\x18\x02 \x01(\x0e\x32\x1d.ManageCronJobFlowArgs.Action:\x04NOOP\"\xc1\x01\n\x06\x41\x63tion\x12@\n\x04NOOP\x10\x00\x1a\x36\xea\xb9\xcb\xb9\x01\x30\x44o nothing (but still check access permissions.)\x12\'\n\x07\x44ISABLE\x10\x01\x1a\x1a\xea\xb9\xcb\xb9\x01\x14\x44isable ths cron job\x12%\n\x06\x45NABLE\x10\x02\x1a\x19\xea\xb9\xcb\xb9\x01\x13\x45nable the cron job\x12%\n\x06\x44\x45LETE\x10\x03\x1a\x19\xea\xb9\xcb\xb9\x01\x13\x44\x65lete the cron job\"\xbc\x02\n\x16\x43ronHuntOutputFlowArgs\x12\x30\n\x08hunt_urn\x18\x01 \x01(\tB\x1e\xe2\xfc\xe3\xc4\x01\x18\n\x06RDFURN\x12\x0eURN of a hunt.\x12P\n\x0cmetadata_urn\x18\x02 \x01(\tB:\xe2\xfc\xe3\xc4\x01\x34\n\x06RDFURN\x12*URN of a cron hunt output module metadata.\x12=\n\x12output_plugin_name\x18\x03 \x01(\tB!\xe2\xfc\xe3\xc4\x01\x1b\x12\x19Name of an output plugin.\x12_\n\x12output_plugin_args\x18\x04 \x01(\x0c\x42\x43\xe2\xfc\xe3\xc4\x01=\x12!Args passed to the output plugin.*\x18GetOutputPluginArgsClass\"\xd6\x02\n\x14PlistValueFilterArgs\x12W\n\x07request\x18\x01 \x01(\x0b\x32\r.PlistRequestB7\xe2\xfc\xe3\xc4\x01\x31\x12/A request for the client to parse a plist file.\x12\xe4\x01\n\x06output\x18\x03 \x01(\t:\x14\x61nalysis/{p}/{u}-{t}B\xbd\x01\xe2\xfc\xe3\xc4\x01\xb6\x01\x12\xb3\x01The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.\"\xb9\x01\n\x11RunReportFlowArgs\x12G\n\x0breport_name\x18\x01 \x01(\tB2\xe2\xfc\xe3\xc4\x01,\n\nReportName\x12\x1eThe name of the report to run.\x12[\n\x05\x65mail\x18\x02 \x01(\tBL\xe2\xfc\xe3\xc4\x01\x46\n\x12\x44omainEmailAddress\x12\x30The email address that messages will be sent to.\"\xa6\x03\n\x1c\x45numerateWindowsServicesArgs\x12M\n\x11\x64ownload_binaries\x18\x01 \x01(\x08:\x04trueB,\xe2\xfc\xe3\xc4\x01&\x12$If set, also downloads the binaries.\x12\xe4\x01\n\x06output\x18\x02 \x01(\t:\x14\x61nalysis/{p}/{u}-{t}B\xbd\x01\xe2\xfc\xe3\xc4\x01\xb6\x01\x12\xb3\x01The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.\x12P\n\x08pathtype\x18\x03 \x01(\x0e\x32\x12.PathSpec.PathType:\x03TSKB%\xe2\xfc\xe3\xc4\x01\x1f\x12\x1dHow to access the filesystem.\"\xb3\x04\n\x11\x43hromePluginsArgs\x12q\n\x04path\x18\x01 \x01(\tBc\xe2\xfc\xe3\xc4\x01]\x12[A path to a Chrome Extensions directory. If not set, the path is guessed from the username.\x12\x39\n\x08pathtype\x18\x02 \x01(\x0e\x32\x12.PathSpec.PathTypeB\x13\xe2\xfc\xe3\xc4\x01\r\x12\x0b\x41\x63\x63\x65ss mode\x12\xe4\x01\n\x06output\x18\x03 \x01(\t:\x14\x61nalysis/{p}/{u}-{t}B\xbd\x01\xe2\xfc\xe3\xc4\x01\xb6\x01\x12\xb3\x01The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.\x12@\n\x08username\x18\x04 \x01(\tB.\xe2\xfc\xe3\xc4\x01(\x12&The user to get Chrome extensions for.\x12G\n\x0e\x64ownload_files\x18\x05 \x01(\x08:\x05\x66\x61lseB(\xe2\xfc\xe3\xc4\x01\"\x12 Should extensions be downloaded?\"\x1f\n\x10PriorityFlowArgs\x12\x0b\n\x03msg\x18\x01 \x01(\t\"@\n\x16\x43lientActionRunnerArgs\x12&\n\x06\x61\x63tion\x18\x01 \x01(\tB\x16\xe2\xfc\xe3\xc4\x01\x10\x12\x0e\x41\x63tion to run.\"+\n\x10\x42\x61\x64\x41rgsFlow1Args\x12\x17\n\x04\x61rg1\x18\x01 \x01(\x0b\x32\t.PathSpec\"(\n\x0fSendingFlowArgs\x12\x15\n\rmessage_count\x18\x01 \x01(\x04\"&\n\x15RecursiveTestFlowArgs\x12\r\n\x05\x64\x65pth\x18\x01 \x01(\x04\"\xe1\x01\n!RequestApprovalWithReasonFlowArgs\x12\x38\n\x06reason\x18\x01 \x01(\t:\x0bUnspecifiedB\x1b\xe2\xfc\xe3\xc4\x01\x15\x12\x13Reason for approval\x12+\n\x08\x61pprover\x18\x02 \x01(\tB\x19\xe2\xfc\xe3\xc4\x01\x13\x12\x11\x41pprover username\x12U\n\x0bsubject_urn\x18\x03 \x01(\tB@\xe2\xfc\xe3\xc4\x01:\n\x06RDFURN\x12\x30URN of the object that approval is required for.\"\xdf\x01\n\x1fGrantApprovalWithReasonFlowArgs\x12\x38\n\x06reason\x18\x01 \x01(\t:\x0bUnspecifiedB\x1b\xe2\xfc\xe3\xc4\x01\x15\x12\x13Reason for approval\x12+\n\x08\x64\x65legate\x18\x02 \x01(\tB\x19\xe2\xfc\xe3\xc4\x01\x13\x12\x11\x44\x65legate username\x12U\n\x0bsubject_urn\x18\x03 \x01(\tB@\xe2\xfc\xe3\xc4\x01:\n\x06RDFURN\x12\x30URN of the object that approval is required for.\"V\n\x11StartHuntFlowArgs\x12\x41\n\x08hunt_urn\x18\x01 \x01(\tB/\xe2\xfc\xe3\xc4\x01)\n\x06RDFURN\x12\x1fThe URN of the hunt to execute.\"T\n\x11PauseHuntFlowArgs\x12?\n\x08hunt_urn\x18\x01 \x01(\tB-\xe2\xfc\xe3\xc4\x01\'\n\x06RDFURN\x12\x1dThe URN of the hunt to pause.\"Z\n\x17\x43heckHuntAccessFlowArgs\x12?\n\x08hunt_urn\x18\x01 \x01(\tB-\xe2\xfc\xe3\xc4\x01\'\n\x06RDFURN\x12\x1dThe URN of the hunt to check.\"\xbf\x02\n\x0eMemoryHuntArgs\x12\x46\n\x07request\x18\x01 \x01(\x0b\x32\t.GrepSpecB*\xe2\xfc\xe3\xc4\x01$\x12\"Search memory for this expression.\x12\xe4\x01\n\x06output\x18\x02 \x01(\t:\x14\x61nalysis/{p}/{u}-{t}B\xbd\x01\xe2\xfc\xe3\xc4\x01\xb6\x01\x12\xb3\x01The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.\"\x86\x01\n\x11UpdateVFSFileArgs\x12\x31\n\x0cvfs_file_urn\x18\x01 \x01(\tB\x1b\xe2\xfc\xe3\xc4\x01\x15\n\x06RDFURN\x12\x0bVFSFile urn\x12>\n\tattribute\x18\x02 \x01(\t:\raff4:containsB\x1c\xe2\xfc\xe3\xc4\x01\x16\x12\x14\x41ttribute to update.')



_HUNTRUNNERARGS_STATE = _descriptor.EnumDescriptor(
  name='State',
  full_name='HuntRunnerArgs.State',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='STOPPED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='STARTED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PAUSED', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3083,
  serialized_end=3128,
)

_MANAGECRONJOBFLOWARGS_ACTION = _descriptor.EnumDescriptor(
  name='Action',
  full_name='ManageCronJobFlowArgs.Action',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NOOP', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\0010Do nothing (but still check access permissions.)'),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISABLE', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\001\024Disable ths cron job'),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENABLE', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\001\023Enable the cron job'),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DELETE', index=3, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\001\023Delete the cron job'),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=17029,
  serialized_end=17222,
)


_ACLTOKEN = _descriptor.Descriptor(
  name='ACLToken',
  full_name='ACLToken',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='ACLToken.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason', full_name='ACLToken.reason', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='requested_access', full_name='ACLToken.requested_access', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='expiry', full_name='ACLToken.expiry', index=3,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\n\013RDFDatetime\022\034When does this token expire?')),
    _descriptor.FieldDescriptor(
      name='source_ips', full_name='ACLToken.source_ips', index=4,
      number=6, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='process', full_name='ACLToken.process', index=5,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_emergency', full_name='ACLToken.is_emergency', index=6,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=106,
  serialized_end=302,
)


_FLOWRUNNERARGS = _descriptor.Descriptor(
  name='FlowRunnerArgs',
  full_name='FlowRunnerArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='priority', full_name='FlowRunnerArgs.priority', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\"\022 The priority used for this flow.')),
    _descriptor.FieldDescriptor(
      name='notify_to_user', full_name='FlowRunnerArgs.notify_to_user', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001G\022/Should a notification be sent to the initiator.\"\024Notify at Completion')),
    _descriptor.FieldDescriptor(
      name='send_replies', full_name='FlowRunnerArgs.send_replies', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001E\0223Should send replies back to the parent flow or not.\030\002\"\014Send Replies')),
    _descriptor.FieldDescriptor(
      name='notification_event', full_name='FlowRunnerArgs.notification_event', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001{\022cAn event listener\'s event name. An event will be published to this listener once the flow finishes.\030\002\"\022Notification Event')),
    _descriptor.FieldDescriptor(
      name='notification_urn', full_name='FlowRunnerArgs.notification_urn', index=4,
      number=14, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001h\n\tSessionID\022YThe Session ID for the event listener to receive a notification when this flow completes.\030\002')),
    _descriptor.FieldDescriptor(
      name='client_id', full_name='FlowRunnerArgs.client_id', index=5,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\n\tClientURN\022$The client id this flow operates on.\030\002')),
    _descriptor.FieldDescriptor(
      name='queue', full_name='FlowRunnerArgs.queue', index=6,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("W", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\n\006RDFURN\022\036The queue to use for the flow.\030\002')),
    _descriptor.FieldDescriptor(
      name='event_id', full_name='FlowRunnerArgs.event_id', index=7,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0010\022,A logging event id for issuing further logs.\030\002')),
    _descriptor.FieldDescriptor(
      name='token', full_name='FlowRunnerArgs.token', index=8,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0011\022-The access token to be used for this request.\030\002')),
    _descriptor.FieldDescriptor(
      name='cpu_limit', full_name='FlowRunnerArgs.cpu_limit', index=9,
      number=9, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0224A limit on the client cpu seconds used by this flow.\030\001')),
    _descriptor.FieldDescriptor(
      name='network_bytes_limit', full_name='FlowRunnerArgs.network_bytes_limit', index=10,
      number=13, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\022/A limit on the total traffic used by this flow.\030\001')),
    _descriptor.FieldDescriptor(
      name='request_state', full_name='FlowRunnerArgs.request_state', index=11,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022%The request state of the parent flow.\030\002')),
    _descriptor.FieldDescriptor(
      name='flow_name', full_name='FlowRunnerArgs.flow_name', index=12,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0223The name of the class implementing the flow to run.\030\002')),
    _descriptor.FieldDescriptor(
      name='base_session_id', full_name='FlowRunnerArgs.base_session_id', index=13,
      number=12, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001P\n\tSessionID\022AThe session id for the flow runner. If not specified we make one.\030\002')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=305,
  serialized_end=1690,
)


_HUNTRUNNERARGS = _descriptor.Descriptor(
  name='HuntRunnerArgs',
  full_name='HuntRunnerArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_name', full_name='HuntRunnerArgs.hunt_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0015\0223The name of the class implementing the hunt to run.')),
    _descriptor.FieldDescriptor(
      name='description', full_name='HuntRunnerArgs.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035The description of this hunt.')),
    _descriptor.FieldDescriptor(
      name='regex_rules', full_name='HuntRunnerArgs.regex_rules', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001E\022CRegex rules that trigger this hunt. Note that all rules must match.')),
    _descriptor.FieldDescriptor(
      name='integer_rules', full_name='HuntRunnerArgs.integer_rules', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001<\022:Integer rules that trigger this hunt.All rules must match.')),
    _descriptor.FieldDescriptor(
      name='priority', full_name='HuntRunnerArgs.priority', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001$\022 The priority used for this flow.\030\001')),
    _descriptor.FieldDescriptor(
      name='notification_event', full_name='HuntRunnerArgs.notification_event', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\200\001\022hAn event name for an event listener. An event will be published to this listener once the flow finishes.\030\002\"\022Notification Event')),
    _descriptor.FieldDescriptor(
      name='queue', full_name='HuntRunnerArgs.queue', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("W", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\n\006RDFURN\022\036The queue to use for the flow.\030\002')),
    _descriptor.FieldDescriptor(
      name='token', full_name='HuntRunnerArgs.token', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0011\022-The access token to be used for this request.\030\002')),
    _descriptor.FieldDescriptor(
      name='cpu_limit', full_name='HuntRunnerArgs.cpu_limit', index=8,
      number=9, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0224A limit on the client cpu seconds used by this flow.\030\001')),
    _descriptor.FieldDescriptor(
      name='network_bytes_limit', full_name='HuntRunnerArgs.network_bytes_limit', index=9,
      number=13, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\022/A limit on the total traffic used by this flow.\030\001')),
    _descriptor.FieldDescriptor(
      name='client_limit', full_name='HuntRunnerArgs.client_limit', index=10,
      number=10, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\311\001\022\270\001Maximum number of clients participating in the hunt. Note that this limit can be overshot by a small number of clients if there are multiple workers running. Use this only for testing.\"\014Client Limit')),
    _descriptor.FieldDescriptor(
      name='expiry_time', full_name='HuntRunnerArgs.expiry_time', index=11,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("31d", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\n\010Duration\022\031Expiry time for the hunt.\"\013Expiry Time')),
    _descriptor.FieldDescriptor(
      name='state', full_name='HuntRunnerArgs.state', index=12,
      number=12, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\033\022\027The state of this hunt.\030\002')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _HUNTRUNNERARGS_STATE,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1693,
  serialized_end=3128,
)


_SAMPLEHUNTARGS = _descriptor.Descriptor(
  name='SampleHuntArgs',
  full_name='SampleHuntArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filename', full_name='SampleHuntArgs.filename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("/tmp/evil.txt", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\036\022\034evil filename to search for.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3130,
  serialized_end=3217,
)


_FLOWREQUEST = _descriptor.Descriptor(
  name='FlowRequest',
  full_name='FlowRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='client_ids', full_name='FlowRequest.client_ids', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\n\tClientURN\022!The clients to start the flow on.')),
    _descriptor.FieldDescriptor(
      name='args', full_name='FlowRequest.args', index=1,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\226\001\022\201\001Args to the flow. These depend on the flow_name parameter.It is expected that this field contains an instance of flow\'s arg_type.*\020GetFlowArgsClass')),
    _descriptor.FieldDescriptor(
      name='runner_args', full_name='FlowRequest.runner_args', index=2,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Args to the flow runner.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3220,
  serialized_end=3554,
)


_OUTPUTPLUGIN = _descriptor.Descriptor(
  name='OutputPlugin',
  full_name='OutputPlugin',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='plugin_name', full_name='OutputPlugin.plugin_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001 \022\036The name of the output plugin.')),
    _descriptor.FieldDescriptor(
      name='plugin_args', full_name='OutputPlugin.plugin_args', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001j\022TThe parameters for this plugin. Must be an instance of the named plugin\'s args_type.*\022GetPluginArgsClass')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3557,
  serialized_end=3768,
)


_EMAILPLUGINARGS = _descriptor.Descriptor(
  name='EmailPluginArgs',
  full_name='EmailPluginArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='email', full_name='EmailPluginArgs.email', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001F\n\022DomainEmailAddress\0220The email address that messages will be sent to.')),
    _descriptor.FieldDescriptor(
      name='email_limit', full_name='EmailPluginArgs.email_limit', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=100,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3771,
  serialized_end=3907,
)


_COLLECTIONPLUGINARGS = _descriptor.Descriptor(
  name='CollectionPluginArgs',
  full_name='CollectionPluginArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='collection_name', full_name='CollectionPluginArgs.collection_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("Results", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001@\022+The name of the collection within the hunt.\030\001\"\017Collection Name')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3910,
  serialized_end=4038,
)


_VARIABLEGENERICHUNTARGS = _descriptor.Descriptor(
  name='VariableGenericHuntArgs',
  full_name='VariableGenericHuntArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flows', full_name='VariableGenericHuntArgs.flows', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229A list of requests for starting flows on certain clients.')),
    _descriptor.FieldDescriptor(
      name='output_plugins', full_name='VariableGenericHuntArgs.output_plugins', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(The output plugins to use for this hunt.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4041,
  serialized_end=4251,
)


_MBRHUNTARGS = _descriptor.Descriptor(
  name='MBRHuntArgs',
  full_name='MBRHuntArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='length', full_name='MBRHuntArgs.length', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=4096,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\036\022\034Number of bytes to retrieve.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4253,
  serialized_end=4326,
)


_GENERICHUNTARGS = _descriptor.Descriptor(
  name='GenericHuntArgs',
  full_name='GenericHuntArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flow_args', full_name='GenericHuntArgs.flow_args', index=0,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001g\022QArguments to the flow to run. This should be an instance of flow.args_type proto.\030\002*\020GetFlowArgsClass')),
    _descriptor.FieldDescriptor(
      name='flow_runner_args', full_name='GenericHuntArgs.flow_runner_args', index=1,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(The runner args for launching each flow.')),
    _descriptor.FieldDescriptor(
      name='output_plugins', full_name='GenericHuntArgs.output_plugins', index=2,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(The output plugins to use for this hunt.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4329,
  serialized_end=4659,
)


_CAENROLERARGS = _descriptor.Descriptor(
  name='CAEnrolerArgs',
  full_name='CAEnrolerArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='csr', full_name='CAEnrolerArgs.csr', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0019\n\013Certificate\022*A Certificate RDFValue with the CSR in it.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4661,
  serialized_end=4754,
)


_DELETEGRRTEMPFILESARGS = _descriptor.Descriptor(
  name='DeleteGRRTempFilesArgs',
  full_name='DeleteGRRTempFilesArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='DeleteGRRTempFilesArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\344\001\022\341\001The pathspec target for deletion.If path is a directory, look in the top level for filenames beginning with Client.tempfile_prefix, and delete them. If path is a regular file and starts with Client.tempfile_prefix, delete it.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4757,
  serialized_end=5049,
)


_UNINSTALLARGS = _descriptor.Descriptor(
  name='UninstallArgs',
  full_name='UninstallArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='kill', full_name='UninstallArgs.kill', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Kills the client if set.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5051,
  serialized_end=5114,
)


_UPDATECONFIGARGS = _descriptor.Descriptor(
  name='UpdateConfigArgs',
  full_name='UpdateConfigArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='config', full_name='UpdateConfigArgs.config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001#\022!The config to send to the client.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5116,
  serialized_end=5205,
)


_EXECUTEPYTHONHACKARGS = _descriptor.Descriptor(
  name='ExecutePythonHackArgs',
  full_name='ExecutePythonHackArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hack_name', full_name='ExecutePythonHackArgs.hack_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\"\022 The name of the hack to execute.')),
    _descriptor.FieldDescriptor(
      name='py_args', full_name='ExecutePythonHackArgs.py_args', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026Python Hack Arguments.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5208,
  serialized_end=5348,
)


_EXECUTECOMMANDARGS = _descriptor.Descriptor(
  name='ExecuteCommandArgs',
  full_name='ExecuteCommandArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cmd', full_name='ExecuteCommandArgs.cmd', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\002\022\000')),
    _descriptor.FieldDescriptor(
      name='command_line', full_name='ExecuteCommandArgs.command_line', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0225The arguments to the command as a shell command line.')),
    _descriptor.FieldDescriptor(
      name='time_limit', full_name='ExecuteCommandArgs.time_limit', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=True, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0226The time limit for this execution, -1 means unlimited.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5351,
  serialized_end=5567,
)


_ONLINENOTIFICATIONARGS = _descriptor.Descriptor(
  name='OnlineNotificationArgs',
  full_name='OnlineNotificationArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='email', full_name='OnlineNotificationArgs.email', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001d\n\022DomainEmailAddress\022NEmail address to send to. If not set, mail will be sent to the logged in user.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5570,
  serialized_end=5717,
)


_UPDATECLIENTARGS = _descriptor.Descriptor(
  name='UpdateClientArgs',
  full_name='UpdateClientArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='blob_path', full_name='UpdateClientArgs.blob_path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001B\n\006RDFURN\0228An aff4 path to a GRRSignedBlob of a new client version.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5719,
  serialized_end=5830,
)


_KEEPALIVEARGS = _descriptor.Descriptor(
  name='KeepAliveArgs',
  full_name='KeepAliveArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='duration', full_name='KeepAliveArgs.duration', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("1h", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001D\n\010Duration\0228Until when should the client stay in the fast poll mode.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5832,
  serialized_end=5945,
)


_TERMINATEFLOWARGS = _descriptor.Descriptor(
  name='TerminateFlowArgs',
  full_name='TerminateFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flow_urn', full_name='TerminateFlowArgs.flow_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\n\tSessionID\022!The URN of the flow to terminate.')),
    _descriptor.FieldDescriptor(
      name='reason', full_name='TerminateFlowArgs.reason', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\031\022\027Reason for termination.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=5948,
  serialized_end=6088,
)


_LAUNCHBINARYARGS = _descriptor.Descriptor(
  name='LaunchBinaryArgs',
  full_name='LaunchBinaryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='binary', full_name='LaunchBinaryArgs.binary', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\n\006RDFURN\022!The URN of the binary to execute.')),
    _descriptor.FieldDescriptor(
      name='command_line', full_name='LaunchBinaryArgs.command_line', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\022)Binary Arguments as a shell command line.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=6091,
  serialized_end=6249,
)


_WINUSERACTIVITYINVESTIGATIONARGS = _descriptor.Descriptor(
  name='WinUserActivityInvestigationArgs',
  full_name='WinUserActivityInvestigationArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='WinUserActivityInvestigationArgs.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001$\022\"The user to target the actions to.')),
    _descriptor.FieldDescriptor(
      name='get_browser_history', full_name='WinUserActivityInvestigationArgs.get_browser_history', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022\'Call each of the browser history flows.')),
    _descriptor.FieldDescriptor(
      name='recursive_list_homedir', full_name='WinUserActivityInvestigationArgs.recursive_list_homedir', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=5,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\0221Recursively list the users homedir to this depth.')),
    _descriptor.FieldDescriptor(
      name='recursive_list_user_registry', full_name='WinUserActivityInvestigationArgs.recursive_list_user_registry', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=5,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\022)Recursively list the users registry hive.')),
    _descriptor.FieldDescriptor(
      name='artifact_list', full_name='WinUserActivityInvestigationArgs.artifact_list', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\033\022\031A list of Artifact names.')),
    _descriptor.FieldDescriptor(
      name='timeline_collected_data', full_name='WinUserActivityInvestigationArgs.timeline_collected_data', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-Once complete create a timeline for the host.')),
    _descriptor.FieldDescriptor(
      name='use_tsk', full_name='WinUserActivityInvestigationArgs.use_tsk', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\022)Use raw filesystem access where possible.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=6252,
  serialized_end=6838,
)


_ARTIFACTCOLLECTORFLOWARGS = _descriptor.Descriptor(
  name='ArtifactCollectorFlowArgs',
  full_name='ArtifactCollectorFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='artifact_list', full_name='ArtifactCollectorFlowArgs.artifact_list', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\022\037A list of Artifact class names.')),
    _descriptor.FieldDescriptor(
      name='use_tsk', full_name='ArtifactCollectorFlowArgs.use_tsk', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-Whether raw filesystem access should be used.')),
    _descriptor.FieldDescriptor(
      name='store_results_in_aff4', full_name='ArtifactCollectorFlowArgs.store_results_in_aff4', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001a\022_Should the collected artifacts be written to the GRR AFF4 namespace based on the AFF4->RDF map.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='ArtifactCollectorFlowArgs.output', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001g\022eIf set, a relative URN to write each result to. This will create the collection if it does not exist.')),
    _descriptor.FieldDescriptor(
      name='split_output_by_artifact', full_name='ArtifactCollectorFlowArgs.split_output_by_artifact', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001a\022_If True, use output as a directory and write a separate collection for each artifact collected.')),
    _descriptor.FieldDescriptor(
      name='knowledge_base', full_name='ArtifactCollectorFlowArgs.knowledge_base', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001_\022[An optional knowledge base to use, if not specified we retrieve one from the client object.\030\002')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=6841,
  serialized_end=7571,
)


_INTERROGATEARGS = _descriptor.Descriptor(
  name='InterrogateArgs',
  full_name='InterrogateArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='lightweight', full_name='InterrogateArgs.lightweight', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0014\0222Perform a light weight version of the interrogate.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=7573,
  serialized_end=7678,
)


_FETCHALLFILESARGS = _descriptor.Descriptor(
  name='FetchAllFilesArgs',
  full_name='FetchAllFilesArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='findspec', full_name='FetchAllFilesArgs.findspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001o\022mWhich files to search for. The default is to search the entire system for files with an executable extension.')),
    _descriptor.FieldDescriptor(
      name='iteration_count', full_name='FetchAllFilesArgs.iteration_count', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=10000,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\214\001\022\211\001Files examined per iteration before reporting back to the server. Should be large enough to make the  roundtrip to the server worthwhile.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=7681,
  serialized_end=8032,
)


_FINGERPRINTFILEARGS = _descriptor.Descriptor(
  name='FingerprintFileArgs',
  full_name='FingerprintFileArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='FingerprintFileArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035The file path to fingerprint.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=8034,
  serialized_end=8123,
)


_IMAGEMEMORYARGS = _descriptor.Descriptor(
  name='ImageMemoryArgs',
  full_name='ImageMemoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='driver_installer', full_name='ImageMemoryArgs.driver_installer', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\206\001\022\201\001An optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\030\002')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=8126,
  serialized_end=8338,
)


_DOWNLOADMEMORYIMAGEARGS = _descriptor.Descriptor(
  name='DownloadMemoryImageArgs',
  full_name='DownloadMemoryImageArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='destdir', full_name='DownloadMemoryImageArgs.destdir', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\215\001\022\212\001Destination directory on the client for the temporary image. Leave blank to use defaults. Parent directories will be created if necessary.')),
    _descriptor.FieldDescriptor(
      name='offset', full_name='DownloadMemoryImageArgs.offset', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026Memory offset in bytes')),
    _descriptor.FieldDescriptor(
      name='length', full_name='DownloadMemoryImageArgs.length', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0225Number of bytes to copy (default 0 copies all memory)')),
    _descriptor.FieldDescriptor(
      name='gzip', full_name='DownloadMemoryImageArgs.gzip', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(Gzip temporary image file on the client.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=8341,
  serialized_end=8738,
)


_LOADMEMORYDRIVERARGS = _descriptor.Descriptor(
  name='LoadMemoryDriverArgs',
  full_name='LoadMemoryDriverArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='driver_installer', full_name='LoadMemoryDriverArgs.driver_installer', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\206\001\022\201\001An optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\030\002')),
    _descriptor.FieldDescriptor(
      name='reload_if_loaded', full_name='LoadMemoryDriverArgs.reload_if_loaded', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001H\022-If the driver is already loaded we reload it.\"\027Force reload of driver.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=8741,
  serialized_end=9071,
)


_ANALYZECLIENTMEMORYARGS = _descriptor.Descriptor(
  name='AnalyzeClientMemoryArgs',
  full_name='AnalyzeClientMemoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='driver_installer', full_name='AnalyzeClientMemoryArgs.driver_installer', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\204\001\022\201\001An optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.')),
    _descriptor.FieldDescriptor(
      name='request', full_name='AnalyzeClientMemoryArgs.request', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A request for the client\'s volatility subsystem.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='AnalyzeClientMemoryArgs.output', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/{p}/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=9074,
  serialized_end=9618,
)


_GREPMEMORYARGS = _descriptor.Descriptor(
  name='GrepMemoryArgs',
  full_name='GrepMemoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='GrepMemoryArgs.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\n\014BareGrepSpec\022\036A grepspec for memory devices.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='GrepMemoryArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/grep/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026The output collection.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\332\374\343\304\001=\n;A grep specification which operates only on memory devices.'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=9621,
  serialized_end=9859,
)


_GETPROCESSESBINARIESARGS = _descriptor.Descriptor(
  name='GetProcessesBinariesArgs',
  full_name='GetProcessesBinariesArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='output', full_name='GetProcessesBinariesArgs.output', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/get-processes-binaries/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=9862,
  serialized_end=10003,
)


_GETPROCESSESBINARIESVOLATILITYARGS = _descriptor.Descriptor(
  name='GetProcessesBinariesVolatilityArgs',
  full_name='GetProcessesBinariesVolatilityArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='output', full_name='GetProcessesBinariesVolatilityArgs.output', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/get-processes-binaries/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')),
    _descriptor.FieldDescriptor(
      name='filename_regex', full_name='GetProcessesBinariesVolatilityArgs.filename_regex', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode(".", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001[\n\021RegularExpression\0226Regex used to filter the list of binaries to download.\"\016Filename Regex')),
    _descriptor.FieldDescriptor(
      name='request', full_name='GetProcessesBinariesVolatilityArgs.request', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=10006,
  serialized_end=10320,
)


_SOPHOSCOLLECTORARGS = _descriptor.Descriptor(
  name='SophosCollectorArgs',
  full_name='SophosCollectorArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='SophosCollectorArgs.pathtype', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030The requested path type.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='SophosCollectorArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/sophos/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=10323,
  serialized_end=10526,
)


_MACTIMESARGS = _descriptor.Descriptor(
  name='MACTimesArgs',
  full_name='MACTimesArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='MACTimesArgs.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("/fs/", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0225An AFF path (relative to the client area of the VFS).')),
    _descriptor.FieldDescriptor(
      name='output', full_name='MACTimesArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/mactimes/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=10529,
  serialized_end=10738,
)


_FILECOLLECTORARGS = _descriptor.Descriptor(
  name='FileCollectorArgs',
  full_name='FileCollectorArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='findspecs', full_name='FileCollectorArgs.findspecs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001 \022\036A list of find specifications.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='FileCollectorArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/collector/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=10741,
  serialized_end=10943,
)


_VOLATILITYPLUGINSARGS = _descriptor.Descriptor(
  name='VolatilityPluginsArgs',
  full_name='VolatilityPluginsArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='VolatilityPluginsArgs.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A request for the client\'s volatility subsystem.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='VolatilityPluginsArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/{p}/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')),
    _descriptor.FieldDescriptor(
      name='plugins', full_name='VolatilityPluginsArgs.plugins', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001-\n\020VolatilityPlugin\022\031A list of plugins to run.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=10946,
  serialized_end=11241,
)


_FIREFOXHISTORYARGS = _descriptor.Descriptor(
  name='FirefoxHistoryArgs',
  full_name='FirefoxHistoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='FirefoxHistoryArgs.pathtype', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\035\022\033Type of path access to use.')),
    _descriptor.FieldDescriptor(
      name='get_archive', full_name='FirefoxHistoryArgs.get_archive', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0226Should we get Archived History as well (3 months old).')),
    _descriptor.FieldDescriptor(
      name='username', full_name='FirefoxHistoryArgs.username', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\220\001\022\215\001The user to get history for. If history_path is not set this will be used to guess the path to the history files. Can be in form DOMAIN\\user.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='FirefoxHistoryArgs.output', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/firefox-{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')),
    _descriptor.FieldDescriptor(
      name='history_path', full_name='FirefoxHistoryArgs.history_path', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229Path to a profile directory that contains a History file.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=11244,
  serialized_end=11804,
)


_CACHEGREPARGS = _descriptor.Descriptor(
  name='CacheGrepArgs',
  full_name='CacheGrepArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='grep_users', full_name='CacheGrepArgs.grep_users', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001<\022:A list of users to check. Default all users on the system.')),
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='CacheGrepArgs.pathtype', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\035\022\033Type of path access to use.')),
    _descriptor.FieldDescriptor(
      name='data_regex', full_name='CacheGrepArgs.data_regex', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\n\021RegularExpression\022#A regular expression to search for.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='CacheGrepArgs.output', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/CacheGrep/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')),
    _descriptor.FieldDescriptor(
      name='check_chrome', full_name='CacheGrepArgs.check_chrome', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\016\022\014Check Chrome')),
    _descriptor.FieldDescriptor(
      name='check_firefox', full_name='CacheGrepArgs.check_firefox', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\017\022\rCheck Firefox')),
    _descriptor.FieldDescriptor(
      name='check_ie', full_name='CacheGrepArgs.check_ie', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-Check Internet Explorer (Not implemented yet)')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=11807,
  serialized_end=12363,
)


_DOWNLOADDIRECTORYARGS = _descriptor.Descriptor(
  name='DownloadDirectoryArgs',
  full_name='DownloadDirectoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='DownloadDirectoryArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001-\022+The pathspec for the directory to download.')),
    _descriptor.FieldDescriptor(
      name='depth', full_name='DownloadDirectoryArgs.depth', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=10,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Maximum recursion depth.')),
    _descriptor.FieldDescriptor(
      name='ignore_errors', full_name='DownloadDirectoryArgs.ignore_errors', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\\\022ZIf True, we do not raise an error in the casethat a directory or file cannot be not found.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=12366,
  serialized_end=12655,
)


_LISTDIRECTORYARGS = _descriptor.Descriptor(
  name='ListDirectoryArgs',
  full_name='ListDirectoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='ListDirectoryArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022\'The pathspec for the directory to list.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=12657,
  serialized_end=12754,
)


_RECURSIVELISTDIRECTORYARGS = _descriptor.Descriptor(
  name='RecursiveListDirectoryArgs',
  full_name='RecursiveListDirectoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='RecursiveListDirectoryArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022\'The pathspec for the directory to list.')),
    _descriptor.FieldDescriptor(
      name='max_depth', full_name='RecursiveListDirectoryArgs.max_depth', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=5,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Maximum recursion depth.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=12757,
  serialized_end=12919,
)


_SLOWGETFILEARGS = _descriptor.Descriptor(
  name='SlowGetFileArgs',
  full_name='SlowGetFileArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='SlowGetFileArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aff4_chunk_size', full_name='SlowGetFileArgs.aff4_chunk_size', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=1048576,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=12921,
  serialized_end=13001,
)


_GREPARGS = _descriptor.Descriptor(
  name='GrepArgs',
  full_name='GrepArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='GrepArgs.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output', full_name='GrepArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/grep/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026The output collection.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=13003,
  serialized_end=13112,
)


_GLOBARGS = _descriptor.Descriptor(
  name='GlobArgs',
  full_name='GlobArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='paths', full_name='GlobArgs.paths', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001H\n\016GlobExpression\0226A list of paths to glob that can contain %% expansions')),
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='GlobArgs.pathtype', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\034\022\032Type of access to glob in.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=13115,
  serialized_end=13294,
)


_GLOBANDGREPARGS = _descriptor.Descriptor(
  name='GlobAndGrepArgs',
  full_name='GlobAndGrepArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='paths', full_name='GlobAndGrepArgs.paths', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001?\n\016GlobExpression\022-A path to glob that can contain %% expansions')),
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='GlobAndGrepArgs.pathtype', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\034\022\032Type of access to glob in.')),
    _descriptor.FieldDescriptor(
      name='grep', full_name='GlobAndGrepArgs.grep', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\n\014BareGrepSpec\022\030The parameters for grep.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='GlobAndGrepArgs.output', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/GlobAndGrep/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=13297,
  serialized_end=13651,
)


_FINDFILESARGS = _descriptor.Descriptor(
  name='FindFilesArgs',
  full_name='FindFilesArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='findspec', full_name='FindFilesArgs.findspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\022\037A find operation specification.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='FindFilesArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/find/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')),
    _descriptor.FieldDescriptor(
      name='max_results', full_name='FindFilesArgs.max_results', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=500,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001%\022!Maximum number of results to get.\030\001')),
    _descriptor.FieldDescriptor(
      name='iteration_count', full_name='FindFilesArgs.iteration_count', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=20000,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\022\035Files examined per iteration.\030\001')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=13654,
  serialized_end=13980,
)


_GETFILEARGS = _descriptor.Descriptor(
  name='GetFileArgs',
  full_name='GetFileArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='GetFileArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&The pathspec for the file to retrieve.')),
    _descriptor.FieldDescriptor(
      name='read_length', full_name='GetFileArgs.read_length', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001U\022QThe amount of data to read from the file. If 0 we use the value from a stat call.\030\001')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=13983,
  serialized_end=14190,
)


_GETMBRARGS = _descriptor.Descriptor(
  name='GetMBRArgs',
  full_name='GetMBRArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='length', full_name='GetMBRArgs.length', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=4096,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\022%The length of the MBR buffer to read.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=14192,
  serialized_end=14273,
)


_FILEDOWNLOADERARGS = _descriptor.Descriptor(
  name='FileDownloaderArgs',
  full_name='FileDownloaderArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='findspecs', full_name='FileDownloaderArgs.findspecs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&List of find specifications to search.')),
    _descriptor.FieldDescriptor(
      name='pathspecs', full_name='FileDownloaderArgs.pathspecs', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\022%List of path specifications to fetch.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=14276,
  serialized_end=14451,
)


_CHROMEHISTORYARGS = _descriptor.Descriptor(
  name='ChromeHistoryArgs',
  full_name='ChromeHistoryArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='ChromeHistoryArgs.pathtype', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\035\022\033Type of path access to use.')),
    _descriptor.FieldDescriptor(
      name='get_archive', full_name='ChromeHistoryArgs.get_archive', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0226Should we get Archived History as well (3 months old).')),
    _descriptor.FieldDescriptor(
      name='username', full_name='ChromeHistoryArgs.username', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\227\001\022\224\001The user to get Chrome history for. If history_path is not set this will be used to guess the path to the history files. Can be in form DOMAIN\\user.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='ChromeHistoryArgs.output', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229Path to a profile directory that contains a History file.')),
    _descriptor.FieldDescriptor(
      name='history_path', full_name='ChromeHistoryArgs.history_path', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229Path to a profile directory that contains a History file.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=14454,
  serialized_end=14985,
)


_SENDFILEARGS = _descriptor.Descriptor(
  name='SendFileArgs',
  full_name='SendFileArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pathspec', full_name='SendFileArgs.pathspec', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&The pathspec for the file to retrieve.')),
    _descriptor.FieldDescriptor(
      name='host', full_name='SendFileArgs.host', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001%\022#Hostname or IP to send the file to.')),
    _descriptor.FieldDescriptor(
      name='port', full_name='SendFileArgs.port', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=12345,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001&\022$Port number on the listening server.')),
    _descriptor.FieldDescriptor(
      name='address_family', full_name='SendFileArgs.address_family', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\022,address family to use (AF_INET or AF_INET6).')),
    _descriptor.FieldDescriptor(
      name='key', full_name='SendFileArgs.key', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0010\022.An encryption key given in hex representation.')),
    _descriptor.FieldDescriptor(
      name='iv', full_name='SendFileArgs.iv', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\0221The iv for AES, also given in hex representation.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=14988,
  serialized_end=15453,
)


_CLIENTACTIONARGS = _descriptor.Descriptor(
  name='ClientActionArgs',
  full_name='ClientActionArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='action', full_name='ClientActionArgs.action', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026The action to execute.')),
    _descriptor.FieldDescriptor(
      name='save_to', full_name='ClientActionArgs.save_to', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("/tmp", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001F\022DIf set, interpreted as a path to write pickle dumps of responses to.')),
    _descriptor.FieldDescriptor(
      name='break_pdb', full_name='ClientActionArgs.break_pdb', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0016\0224If True, run pdb.set_trace when responses come back.')),
    _descriptor.FieldDescriptor(
      name='action_args', full_name='ClientActionArgs.action_args', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\022\030Client action arguments.*\022GetActionArgsClass')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=15456,
  serialized_end=15786,
)


_CONSOLEDEBUGFLOWARGS = _descriptor.Descriptor(
  name='ConsoleDebugFlowArgs',
  full_name='ConsoleDebugFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flow', full_name='ConsoleDebugFlowArgs.flow', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\026\022\024The flow to execute.')),
    _descriptor.FieldDescriptor(
      name='save_to', full_name='ConsoleDebugFlowArgs.save_to', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("/tmp", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001L\022JIf not None, interpreted as an path to write pickle dumps of responses to.')),
    _descriptor.FieldDescriptor(
      name='break_pdb', full_name='ConsoleDebugFlowArgs.break_pdb', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0016\0224If True, run pdb.set_trace when responses come back.')),
    _descriptor.FieldDescriptor(
      name='print_responses', full_name='ConsoleDebugFlowArgs.print_responses', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035If True, print each response.')),
    _descriptor.FieldDescriptor(
      name='flow_args', full_name='ConsoleDebugFlowArgs.flow_args', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001#\022\017Flow arguments.*\020GetFlowArgsClass')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=15789,
  serialized_end=16176,
)


_CREATEGENERICHUNTFLOWARGS = _descriptor.Descriptor(
  name='CreateGenericHuntFlowArgs',
  full_name='CreateGenericHuntFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_runner_args', full_name='CreateGenericHuntFlowArgs.hunt_runner_args', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hunt_args', full_name='CreateGenericHuntFlowArgs.hunt_args', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=16178,
  serialized_end=16285,
)


_CREATECRONJOBFLOWARGS = _descriptor.Descriptor(
  name='CreateCronJobFlowArgs',
  full_name='CreateCronJobFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='description', full_name='CreateCronJobFlowArgs.description', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-A human readable description of the cron job.')),
    _descriptor.FieldDescriptor(
      name='periodicity', full_name='CreateCronJobFlowArgs.periodicity', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("7d", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\010CronSpec\022\033How often to run this hunt.')),
    _descriptor.FieldDescriptor(
      name='flow_runner_args', full_name='CreateCronJobFlowArgs.flow_runner_args', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='flow_args', full_name='CreateCronJobFlowArgs.flow_args', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\022*\020GetFlowArgsClass')),
    _descriptor.FieldDescriptor(
      name='allow_overruns', full_name='CreateCronJobFlowArgs.allow_overruns', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lifetime', full_name='CreateCronJobFlowArgs.lifetime', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001m\n\010Duration\022aHow long each run of the cron should be allowed to run. Runs that exceed lifetime will be killed.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=16288,
  serialized_end=16710,
)


_MODIFYHUNTFLOWARGS = _descriptor.Descriptor(
  name='ModifyHuntFlowArgs',
  full_name='ModifyHuntFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_urn', full_name='ModifyHuntFlowArgs.hunt_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\006RDFURN\022\035The URN of the hunt to pause.')),
    _descriptor.FieldDescriptor(
      name='client_limit', full_name='ModifyHuntFlowArgs.client_limit', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='expiry_time', full_name='ModifyHuntFlowArgs.expiry_time', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001,\n\013RDFDatetime\022\035When should this hunt expire?')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=16713,
  serialized_end=16893,
)


_MANAGECRONJOBFLOWARGS = _descriptor.Descriptor(
  name='ManageCronJobFlowArgs',
  full_name='ManageCronJobFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='urn', full_name='ManageCronJobFlowArgs.urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\n\006RDFURN\022\027The URN of the cron job')),
    _descriptor.FieldDescriptor(
      name='action', full_name='ManageCronJobFlowArgs.action', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _MANAGECRONJOBFLOWARGS_ACTION,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=16896,
  serialized_end=17222,
)


_CRONHUNTOUTPUTFLOWARGS = _descriptor.Descriptor(
  name='CronHuntOutputFlowArgs',
  full_name='CronHuntOutputFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_urn', full_name='CronHuntOutputFlowArgs.hunt_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\n\006RDFURN\022\016URN of a hunt.')),
    _descriptor.FieldDescriptor(
      name='metadata_urn', full_name='CronHuntOutputFlowArgs.metadata_urn', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0014\n\006RDFURN\022*URN of a cron hunt output module metadata.')),
    _descriptor.FieldDescriptor(
      name='output_plugin_name', full_name='CronHuntOutputFlowArgs.output_plugin_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\033\022\031Name of an output plugin.')),
    _descriptor.FieldDescriptor(
      name='output_plugin_args', full_name='CronHuntOutputFlowArgs.output_plugin_args', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022!Args passed to the output plugin.*\030GetOutputPluginArgsClass')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=17225,
  serialized_end=17541,
)


_PLISTVALUEFILTERARGS = _descriptor.Descriptor(
  name='PlistValueFilterArgs',
  full_name='PlistValueFilterArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='PlistValueFilterArgs.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0011\022/A request for the client to parse a plist file.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='PlistValueFilterArgs.output', index=1,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/{p}/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=17544,
  serialized_end=17886,
)


_RUNREPORTFLOWARGS = _descriptor.Descriptor(
  name='RunReportFlowArgs',
  full_name='RunReportFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='report_name', full_name='RunReportFlowArgs.report_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001,\n\nReportName\022\036The name of the report to run.')),
    _descriptor.FieldDescriptor(
      name='email', full_name='RunReportFlowArgs.email', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001F\n\022DomainEmailAddress\0220The email address that messages will be sent to.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=17889,
  serialized_end=18074,
)


_ENUMERATEWINDOWSSERVICESARGS = _descriptor.Descriptor(
  name='EnumerateWindowsServicesArgs',
  full_name='EnumerateWindowsServicesArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='download_binaries', full_name='EnumerateWindowsServicesArgs.download_binaries', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001&\022$If set, also downloads the binaries.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='EnumerateWindowsServicesArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/{p}/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')),
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='EnumerateWindowsServicesArgs.pathtype', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035How to access the filesystem.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=18077,
  serialized_end=18499,
)


_CHROMEPLUGINSARGS = _descriptor.Descriptor(
  name='ChromePluginsArgs',
  full_name='ChromePluginsArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='ChromePluginsArgs.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001]\022[A path to a Chrome Extensions directory. If not set, the path is guessed from the username.')),
    _descriptor.FieldDescriptor(
      name='pathtype', full_name='ChromePluginsArgs.pathtype', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=-1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\r\022\013Access mode')),
    _descriptor.FieldDescriptor(
      name='output', full_name='ChromePluginsArgs.output', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/{p}/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')),
    _descriptor.FieldDescriptor(
      name='username', full_name='ChromePluginsArgs.username', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&The user to get Chrome extensions for.')),
    _descriptor.FieldDescriptor(
      name='download_files', full_name='ChromePluginsArgs.download_files', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\"\022 Should extensions be downloaded?')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=18502,
  serialized_end=19065,
)


_PRIORITYFLOWARGS = _descriptor.Descriptor(
  name='PriorityFlowArgs',
  full_name='PriorityFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='PriorityFlowArgs.msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19067,
  serialized_end=19098,
)


_CLIENTACTIONRUNNERARGS = _descriptor.Descriptor(
  name='ClientActionRunnerArgs',
  full_name='ClientActionRunnerArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='action', full_name='ClientActionRunnerArgs.action', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\020\022\016Action to run.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19100,
  serialized_end=19164,
)


_BADARGSFLOW1ARGS = _descriptor.Descriptor(
  name='BadArgsFlow1Args',
  full_name='BadArgsFlow1Args',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='arg1', full_name='BadArgsFlow1Args.arg1', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19166,
  serialized_end=19209,
)


_SENDINGFLOWARGS = _descriptor.Descriptor(
  name='SendingFlowArgs',
  full_name='SendingFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message_count', full_name='SendingFlowArgs.message_count', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19211,
  serialized_end=19251,
)


_RECURSIVETESTFLOWARGS = _descriptor.Descriptor(
  name='RecursiveTestFlowArgs',
  full_name='RecursiveTestFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='depth', full_name='RecursiveTestFlowArgs.depth', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19253,
  serialized_end=19291,
)


_REQUESTAPPROVALWITHREASONFLOWARGS = _descriptor.Descriptor(
  name='RequestApprovalWithReasonFlowArgs',
  full_name='RequestApprovalWithReasonFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reason', full_name='RequestApprovalWithReasonFlowArgs.reason', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("Unspecified", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\025\022\023Reason for approval')),
    _descriptor.FieldDescriptor(
      name='approver', full_name='RequestApprovalWithReasonFlowArgs.approver', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\023\022\021Approver username')),
    _descriptor.FieldDescriptor(
      name='subject_urn', full_name='RequestApprovalWithReasonFlowArgs.subject_urn', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001:\n\006RDFURN\0220URN of the object that approval is required for.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19294,
  serialized_end=19519,
)


_GRANTAPPROVALWITHREASONFLOWARGS = _descriptor.Descriptor(
  name='GrantApprovalWithReasonFlowArgs',
  full_name='GrantApprovalWithReasonFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reason', full_name='GrantApprovalWithReasonFlowArgs.reason', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("Unspecified", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\025\022\023Reason for approval')),
    _descriptor.FieldDescriptor(
      name='delegate', full_name='GrantApprovalWithReasonFlowArgs.delegate', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\023\022\021Delegate username')),
    _descriptor.FieldDescriptor(
      name='subject_urn', full_name='GrantApprovalWithReasonFlowArgs.subject_urn', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001:\n\006RDFURN\0220URN of the object that approval is required for.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19522,
  serialized_end=19745,
)


_STARTHUNTFLOWARGS = _descriptor.Descriptor(
  name='StartHuntFlowArgs',
  full_name='StartHuntFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_urn', full_name='StartHuntFlowArgs.hunt_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\n\006RDFURN\022\037The URN of the hunt to execute.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19747,
  serialized_end=19833,
)


_PAUSEHUNTFLOWARGS = _descriptor.Descriptor(
  name='PauseHuntFlowArgs',
  full_name='PauseHuntFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_urn', full_name='PauseHuntFlowArgs.hunt_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\006RDFURN\022\035The URN of the hunt to pause.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19835,
  serialized_end=19919,
)


_CHECKHUNTACCESSFLOWARGS = _descriptor.Descriptor(
  name='CheckHuntAccessFlowArgs',
  full_name='CheckHuntAccessFlowArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hunt_urn', full_name='CheckHuntAccessFlowArgs.hunt_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\006RDFURN\022\035The URN of the hunt to check.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=19921,
  serialized_end=20011,
)


_MEMORYHUNTARGS = _descriptor.Descriptor(
  name='MemoryHuntArgs',
  full_name='MemoryHuntArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='MemoryHuntArgs.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001$\022\"Search memory for this expression.')),
    _descriptor.FieldDescriptor(
      name='output', full_name='MemoryHuntArgs.output', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("analysis/{p}/{u}-{t}", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=20014,
  serialized_end=20333,
)


_UPDATEVFSFILEARGS = _descriptor.Descriptor(
  name='UpdateVFSFileArgs',
  full_name='UpdateVFSFileArgs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vfs_file_urn', full_name='UpdateVFSFileArgs.vfs_file_urn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\025\n\006RDFURN\022\013VFSFile urn')),
    _descriptor.FieldDescriptor(
      name='attribute', full_name='UpdateVFSFileArgs.attribute', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=unicode("aff4:contains", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\026\022\024Attribute to update.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=20336,
  serialized_end=20470,
)

_FLOWRUNNERARGS.fields_by_name['priority'].enum_type = grr.proto.jobs_pb2._GRRMESSAGE_PRIORITY
_FLOWRUNNERARGS.fields_by_name['token'].message_type = _ACLTOKEN
_FLOWRUNNERARGS.fields_by_name['request_state'].message_type = grr.proto.jobs_pb2._REQUESTSTATE
_HUNTRUNNERARGS.fields_by_name['regex_rules'].message_type = grr.proto.jobs_pb2._FOREMANATTRIBUTEREGEX
_HUNTRUNNERARGS.fields_by_name['integer_rules'].message_type = grr.proto.jobs_pb2._FOREMANATTRIBUTEINTEGER
_HUNTRUNNERARGS.fields_by_name['priority'].enum_type = grr.proto.jobs_pb2._GRRMESSAGE_PRIORITY
_HUNTRUNNERARGS.fields_by_name['token'].message_type = _ACLTOKEN
_HUNTRUNNERARGS.fields_by_name['state'].enum_type = _HUNTRUNNERARGS_STATE
_HUNTRUNNERARGS_STATE.containing_type = _HUNTRUNNERARGS;
_FLOWREQUEST.fields_by_name['runner_args'].message_type = _FLOWRUNNERARGS
_VARIABLEGENERICHUNTARGS.fields_by_name['flows'].message_type = _FLOWREQUEST
_VARIABLEGENERICHUNTARGS.fields_by_name['output_plugins'].message_type = _OUTPUTPLUGIN
_GENERICHUNTARGS.fields_by_name['flow_runner_args'].message_type = _FLOWRUNNERARGS
_GENERICHUNTARGS.fields_by_name['output_plugins'].message_type = _OUTPUTPLUGIN
_DELETEGRRTEMPFILESARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_UPDATECONFIGARGS.fields_by_name['config'].message_type = grr.proto.jobs_pb2._GRRCONFIG
_EXECUTEPYTHONHACKARGS.fields_by_name['py_args'].message_type = grr.proto.jobs_pb2._DICT
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['knowledge_base'].message_type = grr.proto.knowledge_base_pb2._KNOWLEDGEBASE
_FETCHALLFILESARGS.fields_by_name['findspec'].message_type = grr.proto.jobs_pb2._FINDSPEC
_FINGERPRINTFILEARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_IMAGEMEMORYARGS.fields_by_name['driver_installer'].message_type = grr.proto.jobs_pb2._DRIVERINSTALLTEMPLATE
_LOADMEMORYDRIVERARGS.fields_by_name['driver_installer'].message_type = grr.proto.jobs_pb2._DRIVERINSTALLTEMPLATE
_ANALYZECLIENTMEMORYARGS.fields_by_name['driver_installer'].message_type = grr.proto.jobs_pb2._DRIVERINSTALLTEMPLATE
_ANALYZECLIENTMEMORYARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._VOLATILITYREQUEST
_GREPMEMORYARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._GREPSPEC
_GETPROCESSESBINARIESVOLATILITYARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._VOLATILITYREQUEST
_SOPHOSCOLLECTORARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_FILECOLLECTORARGS.fields_by_name['findspecs'].message_type = grr.proto.jobs_pb2._FINDSPEC
_VOLATILITYPLUGINSARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._VOLATILITYREQUEST
_FIREFOXHISTORYARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_CACHEGREPARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_DOWNLOADDIRECTORYARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_LISTDIRECTORYARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_RECURSIVELISTDIRECTORYARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_SLOWGETFILEARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_GREPARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._GREPSPEC
_GLOBARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_GLOBANDGREPARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_GLOBANDGREPARGS.fields_by_name['grep'].message_type = grr.proto.jobs_pb2._GREPSPEC
_FINDFILESARGS.fields_by_name['findspec'].message_type = grr.proto.jobs_pb2._FINDSPEC
_GETFILEARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_FILEDOWNLOADERARGS.fields_by_name['findspecs'].message_type = grr.proto.jobs_pb2._FINDSPEC
_FILEDOWNLOADERARGS.fields_by_name['pathspecs'].message_type = grr.proto.jobs_pb2._PATHSPEC
_CHROMEHISTORYARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_SENDFILEARGS.fields_by_name['pathspec'].message_type = grr.proto.jobs_pb2._PATHSPEC
_SENDFILEARGS.fields_by_name['address_family'].enum_type = grr.proto.jobs_pb2._NETWORKADDRESS_FAMILY
_CREATEGENERICHUNTFLOWARGS.fields_by_name['hunt_runner_args'].message_type = _HUNTRUNNERARGS
_CREATEGENERICHUNTFLOWARGS.fields_by_name['hunt_args'].message_type = _GENERICHUNTARGS
_CREATECRONJOBFLOWARGS.fields_by_name['flow_runner_args'].message_type = _FLOWRUNNERARGS
_MANAGECRONJOBFLOWARGS.fields_by_name['action'].enum_type = _MANAGECRONJOBFLOWARGS_ACTION
_MANAGECRONJOBFLOWARGS_ACTION.containing_type = _MANAGECRONJOBFLOWARGS;
_PLISTVALUEFILTERARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._PLISTREQUEST
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_CHROMEPLUGINSARGS.fields_by_name['pathtype'].enum_type = grr.proto.jobs_pb2._PATHSPEC_PATHTYPE
_BADARGSFLOW1ARGS.fields_by_name['arg1'].message_type = grr.proto.jobs_pb2._PATHSPEC
_MEMORYHUNTARGS.fields_by_name['request'].message_type = grr.proto.jobs_pb2._GREPSPEC
DESCRIPTOR.message_types_by_name['ACLToken'] = _ACLTOKEN
DESCRIPTOR.message_types_by_name['FlowRunnerArgs'] = _FLOWRUNNERARGS
DESCRIPTOR.message_types_by_name['HuntRunnerArgs'] = _HUNTRUNNERARGS
DESCRIPTOR.message_types_by_name['SampleHuntArgs'] = _SAMPLEHUNTARGS
DESCRIPTOR.message_types_by_name['FlowRequest'] = _FLOWREQUEST
DESCRIPTOR.message_types_by_name['OutputPlugin'] = _OUTPUTPLUGIN
DESCRIPTOR.message_types_by_name['EmailPluginArgs'] = _EMAILPLUGINARGS
DESCRIPTOR.message_types_by_name['CollectionPluginArgs'] = _COLLECTIONPLUGINARGS
DESCRIPTOR.message_types_by_name['VariableGenericHuntArgs'] = _VARIABLEGENERICHUNTARGS
DESCRIPTOR.message_types_by_name['MBRHuntArgs'] = _MBRHUNTARGS
DESCRIPTOR.message_types_by_name['GenericHuntArgs'] = _GENERICHUNTARGS
DESCRIPTOR.message_types_by_name['CAEnrolerArgs'] = _CAENROLERARGS
DESCRIPTOR.message_types_by_name['DeleteGRRTempFilesArgs'] = _DELETEGRRTEMPFILESARGS
DESCRIPTOR.message_types_by_name['UninstallArgs'] = _UNINSTALLARGS
DESCRIPTOR.message_types_by_name['UpdateConfigArgs'] = _UPDATECONFIGARGS
DESCRIPTOR.message_types_by_name['ExecutePythonHackArgs'] = _EXECUTEPYTHONHACKARGS
DESCRIPTOR.message_types_by_name['ExecuteCommandArgs'] = _EXECUTECOMMANDARGS
DESCRIPTOR.message_types_by_name['OnlineNotificationArgs'] = _ONLINENOTIFICATIONARGS
DESCRIPTOR.message_types_by_name['UpdateClientArgs'] = _UPDATECLIENTARGS
DESCRIPTOR.message_types_by_name['KeepAliveArgs'] = _KEEPALIVEARGS
DESCRIPTOR.message_types_by_name['TerminateFlowArgs'] = _TERMINATEFLOWARGS
DESCRIPTOR.message_types_by_name['LaunchBinaryArgs'] = _LAUNCHBINARYARGS
DESCRIPTOR.message_types_by_name['WinUserActivityInvestigationArgs'] = _WINUSERACTIVITYINVESTIGATIONARGS
DESCRIPTOR.message_types_by_name['ArtifactCollectorFlowArgs'] = _ARTIFACTCOLLECTORFLOWARGS
DESCRIPTOR.message_types_by_name['InterrogateArgs'] = _INTERROGATEARGS
DESCRIPTOR.message_types_by_name['FetchAllFilesArgs'] = _FETCHALLFILESARGS
DESCRIPTOR.message_types_by_name['FingerprintFileArgs'] = _FINGERPRINTFILEARGS
DESCRIPTOR.message_types_by_name['ImageMemoryArgs'] = _IMAGEMEMORYARGS
DESCRIPTOR.message_types_by_name['DownloadMemoryImageArgs'] = _DOWNLOADMEMORYIMAGEARGS
DESCRIPTOR.message_types_by_name['LoadMemoryDriverArgs'] = _LOADMEMORYDRIVERARGS
DESCRIPTOR.message_types_by_name['AnalyzeClientMemoryArgs'] = _ANALYZECLIENTMEMORYARGS
DESCRIPTOR.message_types_by_name['GrepMemoryArgs'] = _GREPMEMORYARGS
DESCRIPTOR.message_types_by_name['GetProcessesBinariesArgs'] = _GETPROCESSESBINARIESARGS
DESCRIPTOR.message_types_by_name['GetProcessesBinariesVolatilityArgs'] = _GETPROCESSESBINARIESVOLATILITYARGS
DESCRIPTOR.message_types_by_name['SophosCollectorArgs'] = _SOPHOSCOLLECTORARGS
DESCRIPTOR.message_types_by_name['MACTimesArgs'] = _MACTIMESARGS
DESCRIPTOR.message_types_by_name['FileCollectorArgs'] = _FILECOLLECTORARGS
DESCRIPTOR.message_types_by_name['VolatilityPluginsArgs'] = _VOLATILITYPLUGINSARGS
DESCRIPTOR.message_types_by_name['FirefoxHistoryArgs'] = _FIREFOXHISTORYARGS
DESCRIPTOR.message_types_by_name['CacheGrepArgs'] = _CACHEGREPARGS
DESCRIPTOR.message_types_by_name['DownloadDirectoryArgs'] = _DOWNLOADDIRECTORYARGS
DESCRIPTOR.message_types_by_name['ListDirectoryArgs'] = _LISTDIRECTORYARGS
DESCRIPTOR.message_types_by_name['RecursiveListDirectoryArgs'] = _RECURSIVELISTDIRECTORYARGS
DESCRIPTOR.message_types_by_name['SlowGetFileArgs'] = _SLOWGETFILEARGS
DESCRIPTOR.message_types_by_name['GrepArgs'] = _GREPARGS
DESCRIPTOR.message_types_by_name['GlobArgs'] = _GLOBARGS
DESCRIPTOR.message_types_by_name['GlobAndGrepArgs'] = _GLOBANDGREPARGS
DESCRIPTOR.message_types_by_name['FindFilesArgs'] = _FINDFILESARGS
DESCRIPTOR.message_types_by_name['GetFileArgs'] = _GETFILEARGS
DESCRIPTOR.message_types_by_name['GetMBRArgs'] = _GETMBRARGS
DESCRIPTOR.message_types_by_name['FileDownloaderArgs'] = _FILEDOWNLOADERARGS
DESCRIPTOR.message_types_by_name['ChromeHistoryArgs'] = _CHROMEHISTORYARGS
DESCRIPTOR.message_types_by_name['SendFileArgs'] = _SENDFILEARGS
DESCRIPTOR.message_types_by_name['ClientActionArgs'] = _CLIENTACTIONARGS
DESCRIPTOR.message_types_by_name['ConsoleDebugFlowArgs'] = _CONSOLEDEBUGFLOWARGS
DESCRIPTOR.message_types_by_name['CreateGenericHuntFlowArgs'] = _CREATEGENERICHUNTFLOWARGS
DESCRIPTOR.message_types_by_name['CreateCronJobFlowArgs'] = _CREATECRONJOBFLOWARGS
DESCRIPTOR.message_types_by_name['ModifyHuntFlowArgs'] = _MODIFYHUNTFLOWARGS
DESCRIPTOR.message_types_by_name['ManageCronJobFlowArgs'] = _MANAGECRONJOBFLOWARGS
DESCRIPTOR.message_types_by_name['CronHuntOutputFlowArgs'] = _CRONHUNTOUTPUTFLOWARGS
DESCRIPTOR.message_types_by_name['PlistValueFilterArgs'] = _PLISTVALUEFILTERARGS
DESCRIPTOR.message_types_by_name['RunReportFlowArgs'] = _RUNREPORTFLOWARGS
DESCRIPTOR.message_types_by_name['EnumerateWindowsServicesArgs'] = _ENUMERATEWINDOWSSERVICESARGS
DESCRIPTOR.message_types_by_name['ChromePluginsArgs'] = _CHROMEPLUGINSARGS
DESCRIPTOR.message_types_by_name['PriorityFlowArgs'] = _PRIORITYFLOWARGS
DESCRIPTOR.message_types_by_name['ClientActionRunnerArgs'] = _CLIENTACTIONRUNNERARGS
DESCRIPTOR.message_types_by_name['BadArgsFlow1Args'] = _BADARGSFLOW1ARGS
DESCRIPTOR.message_types_by_name['SendingFlowArgs'] = _SENDINGFLOWARGS
DESCRIPTOR.message_types_by_name['RecursiveTestFlowArgs'] = _RECURSIVETESTFLOWARGS
DESCRIPTOR.message_types_by_name['RequestApprovalWithReasonFlowArgs'] = _REQUESTAPPROVALWITHREASONFLOWARGS
DESCRIPTOR.message_types_by_name['GrantApprovalWithReasonFlowArgs'] = _GRANTAPPROVALWITHREASONFLOWARGS
DESCRIPTOR.message_types_by_name['StartHuntFlowArgs'] = _STARTHUNTFLOWARGS
DESCRIPTOR.message_types_by_name['PauseHuntFlowArgs'] = _PAUSEHUNTFLOWARGS
DESCRIPTOR.message_types_by_name['CheckHuntAccessFlowArgs'] = _CHECKHUNTACCESSFLOWARGS
DESCRIPTOR.message_types_by_name['MemoryHuntArgs'] = _MEMORYHUNTARGS
DESCRIPTOR.message_types_by_name['UpdateVFSFileArgs'] = _UPDATEVFSFILEARGS

class ACLToken(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _ACLTOKEN

  # @@protoc_insertion_point(class_scope:ACLToken)

class FlowRunnerArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FLOWRUNNERARGS

  # @@protoc_insertion_point(class_scope:FlowRunnerArgs)

class HuntRunnerArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _HUNTRUNNERARGS

  # @@protoc_insertion_point(class_scope:HuntRunnerArgs)

class SampleHuntArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _SAMPLEHUNTARGS

  # @@protoc_insertion_point(class_scope:SampleHuntArgs)

class FlowRequest(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FLOWREQUEST

  # @@protoc_insertion_point(class_scope:FlowRequest)

class OutputPlugin(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _OUTPUTPLUGIN

  # @@protoc_insertion_point(class_scope:OutputPlugin)

class EmailPluginArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _EMAILPLUGINARGS

  # @@protoc_insertion_point(class_scope:EmailPluginArgs)

class CollectionPluginArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _COLLECTIONPLUGINARGS

  # @@protoc_insertion_point(class_scope:CollectionPluginArgs)

class VariableGenericHuntArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _VARIABLEGENERICHUNTARGS

  # @@protoc_insertion_point(class_scope:VariableGenericHuntArgs)

class MBRHuntArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _MBRHUNTARGS

  # @@protoc_insertion_point(class_scope:MBRHuntArgs)

class GenericHuntArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GENERICHUNTARGS

  # @@protoc_insertion_point(class_scope:GenericHuntArgs)

class CAEnrolerArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CAENROLERARGS

  # @@protoc_insertion_point(class_scope:CAEnrolerArgs)

class DeleteGRRTempFilesArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _DELETEGRRTEMPFILESARGS

  # @@protoc_insertion_point(class_scope:DeleteGRRTempFilesArgs)

class UninstallArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _UNINSTALLARGS

  # @@protoc_insertion_point(class_scope:UninstallArgs)

class UpdateConfigArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _UPDATECONFIGARGS

  # @@protoc_insertion_point(class_scope:UpdateConfigArgs)

class ExecutePythonHackArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _EXECUTEPYTHONHACKARGS

  # @@protoc_insertion_point(class_scope:ExecutePythonHackArgs)

class ExecuteCommandArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _EXECUTECOMMANDARGS

  # @@protoc_insertion_point(class_scope:ExecuteCommandArgs)

class OnlineNotificationArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _ONLINENOTIFICATIONARGS

  # @@protoc_insertion_point(class_scope:OnlineNotificationArgs)

class UpdateClientArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _UPDATECLIENTARGS

  # @@protoc_insertion_point(class_scope:UpdateClientArgs)

class KeepAliveArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _KEEPALIVEARGS

  # @@protoc_insertion_point(class_scope:KeepAliveArgs)

class TerminateFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _TERMINATEFLOWARGS

  # @@protoc_insertion_point(class_scope:TerminateFlowArgs)

class LaunchBinaryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LAUNCHBINARYARGS

  # @@protoc_insertion_point(class_scope:LaunchBinaryArgs)

class WinUserActivityInvestigationArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _WINUSERACTIVITYINVESTIGATIONARGS

  # @@protoc_insertion_point(class_scope:WinUserActivityInvestigationArgs)

class ArtifactCollectorFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _ARTIFACTCOLLECTORFLOWARGS

  # @@protoc_insertion_point(class_scope:ArtifactCollectorFlowArgs)

class InterrogateArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _INTERROGATEARGS

  # @@protoc_insertion_point(class_scope:InterrogateArgs)

class FetchAllFilesArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FETCHALLFILESARGS

  # @@protoc_insertion_point(class_scope:FetchAllFilesArgs)

class FingerprintFileArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FINGERPRINTFILEARGS

  # @@protoc_insertion_point(class_scope:FingerprintFileArgs)

class ImageMemoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _IMAGEMEMORYARGS

  # @@protoc_insertion_point(class_scope:ImageMemoryArgs)

class DownloadMemoryImageArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _DOWNLOADMEMORYIMAGEARGS

  # @@protoc_insertion_point(class_scope:DownloadMemoryImageArgs)

class LoadMemoryDriverArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LOADMEMORYDRIVERARGS

  # @@protoc_insertion_point(class_scope:LoadMemoryDriverArgs)

class AnalyzeClientMemoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _ANALYZECLIENTMEMORYARGS

  # @@protoc_insertion_point(class_scope:AnalyzeClientMemoryArgs)

class GrepMemoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GREPMEMORYARGS

  # @@protoc_insertion_point(class_scope:GrepMemoryArgs)

class GetProcessesBinariesArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GETPROCESSESBINARIESARGS

  # @@protoc_insertion_point(class_scope:GetProcessesBinariesArgs)

class GetProcessesBinariesVolatilityArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GETPROCESSESBINARIESVOLATILITYARGS

  # @@protoc_insertion_point(class_scope:GetProcessesBinariesVolatilityArgs)

class SophosCollectorArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _SOPHOSCOLLECTORARGS

  # @@protoc_insertion_point(class_scope:SophosCollectorArgs)

class MACTimesArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _MACTIMESARGS

  # @@protoc_insertion_point(class_scope:MACTimesArgs)

class FileCollectorArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FILECOLLECTORARGS

  # @@protoc_insertion_point(class_scope:FileCollectorArgs)

class VolatilityPluginsArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _VOLATILITYPLUGINSARGS

  # @@protoc_insertion_point(class_scope:VolatilityPluginsArgs)

class FirefoxHistoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FIREFOXHISTORYARGS

  # @@protoc_insertion_point(class_scope:FirefoxHistoryArgs)

class CacheGrepArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CACHEGREPARGS

  # @@protoc_insertion_point(class_scope:CacheGrepArgs)

class DownloadDirectoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _DOWNLOADDIRECTORYARGS

  # @@protoc_insertion_point(class_scope:DownloadDirectoryArgs)

class ListDirectoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LISTDIRECTORYARGS

  # @@protoc_insertion_point(class_scope:ListDirectoryArgs)

class RecursiveListDirectoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _RECURSIVELISTDIRECTORYARGS

  # @@protoc_insertion_point(class_scope:RecursiveListDirectoryArgs)

class SlowGetFileArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _SLOWGETFILEARGS

  # @@protoc_insertion_point(class_scope:SlowGetFileArgs)

class GrepArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GREPARGS

  # @@protoc_insertion_point(class_scope:GrepArgs)

class GlobArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GLOBARGS

  # @@protoc_insertion_point(class_scope:GlobArgs)

class GlobAndGrepArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GLOBANDGREPARGS

  # @@protoc_insertion_point(class_scope:GlobAndGrepArgs)

class FindFilesArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FINDFILESARGS

  # @@protoc_insertion_point(class_scope:FindFilesArgs)

class GetFileArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GETFILEARGS

  # @@protoc_insertion_point(class_scope:GetFileArgs)

class GetMBRArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GETMBRARGS

  # @@protoc_insertion_point(class_scope:GetMBRArgs)

class FileDownloaderArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _FILEDOWNLOADERARGS

  # @@protoc_insertion_point(class_scope:FileDownloaderArgs)

class ChromeHistoryArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CHROMEHISTORYARGS

  # @@protoc_insertion_point(class_scope:ChromeHistoryArgs)

class SendFileArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _SENDFILEARGS

  # @@protoc_insertion_point(class_scope:SendFileArgs)

class ClientActionArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CLIENTACTIONARGS

  # @@protoc_insertion_point(class_scope:ClientActionArgs)

class ConsoleDebugFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CONSOLEDEBUGFLOWARGS

  # @@protoc_insertion_point(class_scope:ConsoleDebugFlowArgs)

class CreateGenericHuntFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CREATEGENERICHUNTFLOWARGS

  # @@protoc_insertion_point(class_scope:CreateGenericHuntFlowArgs)

class CreateCronJobFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CREATECRONJOBFLOWARGS

  # @@protoc_insertion_point(class_scope:CreateCronJobFlowArgs)

class ModifyHuntFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _MODIFYHUNTFLOWARGS

  # @@protoc_insertion_point(class_scope:ModifyHuntFlowArgs)

class ManageCronJobFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _MANAGECRONJOBFLOWARGS

  # @@protoc_insertion_point(class_scope:ManageCronJobFlowArgs)

class CronHuntOutputFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CRONHUNTOUTPUTFLOWARGS

  # @@protoc_insertion_point(class_scope:CronHuntOutputFlowArgs)

class PlistValueFilterArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _PLISTVALUEFILTERARGS

  # @@protoc_insertion_point(class_scope:PlistValueFilterArgs)

class RunReportFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _RUNREPORTFLOWARGS

  # @@protoc_insertion_point(class_scope:RunReportFlowArgs)

class EnumerateWindowsServicesArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _ENUMERATEWINDOWSSERVICESARGS

  # @@protoc_insertion_point(class_scope:EnumerateWindowsServicesArgs)

class ChromePluginsArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CHROMEPLUGINSARGS

  # @@protoc_insertion_point(class_scope:ChromePluginsArgs)

class PriorityFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _PRIORITYFLOWARGS

  # @@protoc_insertion_point(class_scope:PriorityFlowArgs)

class ClientActionRunnerArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CLIENTACTIONRUNNERARGS

  # @@protoc_insertion_point(class_scope:ClientActionRunnerArgs)

class BadArgsFlow1Args(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _BADARGSFLOW1ARGS

  # @@protoc_insertion_point(class_scope:BadArgsFlow1Args)

class SendingFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _SENDINGFLOWARGS

  # @@protoc_insertion_point(class_scope:SendingFlowArgs)

class RecursiveTestFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _RECURSIVETESTFLOWARGS

  # @@protoc_insertion_point(class_scope:RecursiveTestFlowArgs)

class RequestApprovalWithReasonFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _REQUESTAPPROVALWITHREASONFLOWARGS

  # @@protoc_insertion_point(class_scope:RequestApprovalWithReasonFlowArgs)

class GrantApprovalWithReasonFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GRANTAPPROVALWITHREASONFLOWARGS

  # @@protoc_insertion_point(class_scope:GrantApprovalWithReasonFlowArgs)

class StartHuntFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _STARTHUNTFLOWARGS

  # @@protoc_insertion_point(class_scope:StartHuntFlowArgs)

class PauseHuntFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _PAUSEHUNTFLOWARGS

  # @@protoc_insertion_point(class_scope:PauseHuntFlowArgs)

class CheckHuntAccessFlowArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CHECKHUNTACCESSFLOWARGS

  # @@protoc_insertion_point(class_scope:CheckHuntAccessFlowArgs)

class MemoryHuntArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _MEMORYHUNTARGS

  # @@protoc_insertion_point(class_scope:MemoryHuntArgs)

class UpdateVFSFileArgs(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _UPDATEVFSFILEARGS

  # @@protoc_insertion_point(class_scope:UpdateVFSFileArgs)


_ACLTOKEN.fields_by_name['expiry'].has_options = True
_ACLTOKEN.fields_by_name['expiry']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\n\013RDFDatetime\022\034When does this token expire?')
_FLOWRUNNERARGS.fields_by_name['priority'].has_options = True
_FLOWRUNNERARGS.fields_by_name['priority']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\"\022 The priority used for this flow.')
_FLOWRUNNERARGS.fields_by_name['notify_to_user'].has_options = True
_FLOWRUNNERARGS.fields_by_name['notify_to_user']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001G\022/Should a notification be sent to the initiator.\"\024Notify at Completion')
_FLOWRUNNERARGS.fields_by_name['send_replies'].has_options = True
_FLOWRUNNERARGS.fields_by_name['send_replies']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001E\0223Should send replies back to the parent flow or not.\030\002\"\014Send Replies')
_FLOWRUNNERARGS.fields_by_name['notification_event'].has_options = True
_FLOWRUNNERARGS.fields_by_name['notification_event']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001{\022cAn event listener\'s event name. An event will be published to this listener once the flow finishes.\030\002\"\022Notification Event')
_FLOWRUNNERARGS.fields_by_name['notification_urn'].has_options = True
_FLOWRUNNERARGS.fields_by_name['notification_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001h\n\tSessionID\022YThe Session ID for the event listener to receive a notification when this flow completes.\030\002')
_FLOWRUNNERARGS.fields_by_name['client_id'].has_options = True
_FLOWRUNNERARGS.fields_by_name['client_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\n\tClientURN\022$The client id this flow operates on.\030\002')
_FLOWRUNNERARGS.fields_by_name['queue'].has_options = True
_FLOWRUNNERARGS.fields_by_name['queue']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\n\006RDFURN\022\036The queue to use for the flow.\030\002')
_FLOWRUNNERARGS.fields_by_name['event_id'].has_options = True
_FLOWRUNNERARGS.fields_by_name['event_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0010\022,A logging event id for issuing further logs.\030\002')
_FLOWRUNNERARGS.fields_by_name['token'].has_options = True
_FLOWRUNNERARGS.fields_by_name['token']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0011\022-The access token to be used for this request.\030\002')
_FLOWRUNNERARGS.fields_by_name['cpu_limit'].has_options = True
_FLOWRUNNERARGS.fields_by_name['cpu_limit']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0224A limit on the client cpu seconds used by this flow.\030\001')
_FLOWRUNNERARGS.fields_by_name['network_bytes_limit'].has_options = True
_FLOWRUNNERARGS.fields_by_name['network_bytes_limit']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\022/A limit on the total traffic used by this flow.\030\001')
_FLOWRUNNERARGS.fields_by_name['request_state'].has_options = True
_FLOWRUNNERARGS.fields_by_name['request_state']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022%The request state of the parent flow.\030\002')
_FLOWRUNNERARGS.fields_by_name['flow_name'].has_options = True
_FLOWRUNNERARGS.fields_by_name['flow_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0223The name of the class implementing the flow to run.\030\002')
_FLOWRUNNERARGS.fields_by_name['base_session_id'].has_options = True
_FLOWRUNNERARGS.fields_by_name['base_session_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001P\n\tSessionID\022AThe session id for the flow runner. If not specified we make one.\030\002')
_HUNTRUNNERARGS.fields_by_name['hunt_name'].has_options = True
_HUNTRUNNERARGS.fields_by_name['hunt_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0015\0223The name of the class implementing the hunt to run.')
_HUNTRUNNERARGS.fields_by_name['description'].has_options = True
_HUNTRUNNERARGS.fields_by_name['description']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035The description of this hunt.')
_HUNTRUNNERARGS.fields_by_name['regex_rules'].has_options = True
_HUNTRUNNERARGS.fields_by_name['regex_rules']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001E\022CRegex rules that trigger this hunt. Note that all rules must match.')
_HUNTRUNNERARGS.fields_by_name['integer_rules'].has_options = True
_HUNTRUNNERARGS.fields_by_name['integer_rules']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001<\022:Integer rules that trigger this hunt.All rules must match.')
_HUNTRUNNERARGS.fields_by_name['priority'].has_options = True
_HUNTRUNNERARGS.fields_by_name['priority']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001$\022 The priority used for this flow.\030\001')
_HUNTRUNNERARGS.fields_by_name['notification_event'].has_options = True
_HUNTRUNNERARGS.fields_by_name['notification_event']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\200\001\022hAn event name for an event listener. An event will be published to this listener once the flow finishes.\030\002\"\022Notification Event')
_HUNTRUNNERARGS.fields_by_name['queue'].has_options = True
_HUNTRUNNERARGS.fields_by_name['queue']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\n\006RDFURN\022\036The queue to use for the flow.\030\002')
_HUNTRUNNERARGS.fields_by_name['token'].has_options = True
_HUNTRUNNERARGS.fields_by_name['token']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0011\022-The access token to be used for this request.\030\002')
_HUNTRUNNERARGS.fields_by_name['cpu_limit'].has_options = True
_HUNTRUNNERARGS.fields_by_name['cpu_limit']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0224A limit on the client cpu seconds used by this flow.\030\001')
_HUNTRUNNERARGS.fields_by_name['network_bytes_limit'].has_options = True
_HUNTRUNNERARGS.fields_by_name['network_bytes_limit']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\022/A limit on the total traffic used by this flow.\030\001')
_HUNTRUNNERARGS.fields_by_name['client_limit'].has_options = True
_HUNTRUNNERARGS.fields_by_name['client_limit']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\311\001\022\270\001Maximum number of clients participating in the hunt. Note that this limit can be overshot by a small number of clients if there are multiple workers running. Use this only for testing.\"\014Client Limit')
_HUNTRUNNERARGS.fields_by_name['expiry_time'].has_options = True
_HUNTRUNNERARGS.fields_by_name['expiry_time']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\n\010Duration\022\031Expiry time for the hunt.\"\013Expiry Time')
_HUNTRUNNERARGS.fields_by_name['state'].has_options = True
_HUNTRUNNERARGS.fields_by_name['state']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\033\022\027The state of this hunt.\030\002')
_SAMPLEHUNTARGS.fields_by_name['filename'].has_options = True
_SAMPLEHUNTARGS.fields_by_name['filename']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\036\022\034evil filename to search for.')
_FLOWREQUEST.fields_by_name['client_ids'].has_options = True
_FLOWREQUEST.fields_by_name['client_ids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\n\tClientURN\022!The clients to start the flow on.')
_FLOWREQUEST.fields_by_name['args'].has_options = True
_FLOWREQUEST.fields_by_name['args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\226\001\022\201\001Args to the flow. These depend on the flow_name parameter.It is expected that this field contains an instance of flow\'s arg_type.*\020GetFlowArgsClass')
_FLOWREQUEST.fields_by_name['runner_args'].has_options = True
_FLOWREQUEST.fields_by_name['runner_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Args to the flow runner.')
_OUTPUTPLUGIN.fields_by_name['plugin_name'].has_options = True
_OUTPUTPLUGIN.fields_by_name['plugin_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001 \022\036The name of the output plugin.')
_OUTPUTPLUGIN.fields_by_name['plugin_args'].has_options = True
_OUTPUTPLUGIN.fields_by_name['plugin_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001j\022TThe parameters for this plugin. Must be an instance of the named plugin\'s args_type.*\022GetPluginArgsClass')
_EMAILPLUGINARGS.fields_by_name['email'].has_options = True
_EMAILPLUGINARGS.fields_by_name['email']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001F\n\022DomainEmailAddress\0220The email address that messages will be sent to.')
_COLLECTIONPLUGINARGS.fields_by_name['collection_name'].has_options = True
_COLLECTIONPLUGINARGS.fields_by_name['collection_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001@\022+The name of the collection within the hunt.\030\001\"\017Collection Name')
_VARIABLEGENERICHUNTARGS.fields_by_name['flows'].has_options = True
_VARIABLEGENERICHUNTARGS.fields_by_name['flows']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229A list of requests for starting flows on certain clients.')
_VARIABLEGENERICHUNTARGS.fields_by_name['output_plugins'].has_options = True
_VARIABLEGENERICHUNTARGS.fields_by_name['output_plugins']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(The output plugins to use for this hunt.')
_MBRHUNTARGS.fields_by_name['length'].has_options = True
_MBRHUNTARGS.fields_by_name['length']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\036\022\034Number of bytes to retrieve.')
_GENERICHUNTARGS.fields_by_name['flow_args'].has_options = True
_GENERICHUNTARGS.fields_by_name['flow_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001g\022QArguments to the flow to run. This should be an instance of flow.args_type proto.\030\002*\020GetFlowArgsClass')
_GENERICHUNTARGS.fields_by_name['flow_runner_args'].has_options = True
_GENERICHUNTARGS.fields_by_name['flow_runner_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(The runner args for launching each flow.')
_GENERICHUNTARGS.fields_by_name['output_plugins'].has_options = True
_GENERICHUNTARGS.fields_by_name['output_plugins']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(The output plugins to use for this hunt.')
_CAENROLERARGS.fields_by_name['csr'].has_options = True
_CAENROLERARGS.fields_by_name['csr']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0019\n\013Certificate\022*A Certificate RDFValue with the CSR in it.')
_DELETEGRRTEMPFILESARGS.fields_by_name['pathspec'].has_options = True
_DELETEGRRTEMPFILESARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\344\001\022\341\001The pathspec target for deletion.If path is a directory, look in the top level for filenames beginning with Client.tempfile_prefix, and delete them. If path is a regular file and starts with Client.tempfile_prefix, delete it.')
_UNINSTALLARGS.fields_by_name['kill'].has_options = True
_UNINSTALLARGS.fields_by_name['kill']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Kills the client if set.')
_UPDATECONFIGARGS.fields_by_name['config'].has_options = True
_UPDATECONFIGARGS.fields_by_name['config']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001#\022!The config to send to the client.')
_EXECUTEPYTHONHACKARGS.fields_by_name['hack_name'].has_options = True
_EXECUTEPYTHONHACKARGS.fields_by_name['hack_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\"\022 The name of the hack to execute.')
_EXECUTEPYTHONHACKARGS.fields_by_name['py_args'].has_options = True
_EXECUTEPYTHONHACKARGS.fields_by_name['py_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026Python Hack Arguments.')
_EXECUTECOMMANDARGS.fields_by_name['cmd'].has_options = True
_EXECUTECOMMANDARGS.fields_by_name['cmd']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\002\022\000')
_EXECUTECOMMANDARGS.fields_by_name['command_line'].has_options = True
_EXECUTECOMMANDARGS.fields_by_name['command_line']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0225The arguments to the command as a shell command line.')
_EXECUTECOMMANDARGS.fields_by_name['time_limit'].has_options = True
_EXECUTECOMMANDARGS.fields_by_name['time_limit']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0226The time limit for this execution, -1 means unlimited.')
_ONLINENOTIFICATIONARGS.fields_by_name['email'].has_options = True
_ONLINENOTIFICATIONARGS.fields_by_name['email']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001d\n\022DomainEmailAddress\022NEmail address to send to. If not set, mail will be sent to the logged in user.')
_UPDATECLIENTARGS.fields_by_name['blob_path'].has_options = True
_UPDATECLIENTARGS.fields_by_name['blob_path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001B\n\006RDFURN\0228An aff4 path to a GRRSignedBlob of a new client version.')
_KEEPALIVEARGS.fields_by_name['duration'].has_options = True
_KEEPALIVEARGS.fields_by_name['duration']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001D\n\010Duration\0228Until when should the client stay in the fast poll mode.')
_TERMINATEFLOWARGS.fields_by_name['flow_urn'].has_options = True
_TERMINATEFLOWARGS.fields_by_name['flow_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\n\tSessionID\022!The URN of the flow to terminate.')
_TERMINATEFLOWARGS.fields_by_name['reason'].has_options = True
_TERMINATEFLOWARGS.fields_by_name['reason']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\031\022\027Reason for termination.')
_LAUNCHBINARYARGS.fields_by_name['binary'].has_options = True
_LAUNCHBINARYARGS.fields_by_name['binary']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\n\006RDFURN\022!The URN of the binary to execute.')
_LAUNCHBINARYARGS.fields_by_name['command_line'].has_options = True
_LAUNCHBINARYARGS.fields_by_name['command_line']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\022)Binary Arguments as a shell command line.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['username'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['username']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001$\022\"The user to target the actions to.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['get_browser_history'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['get_browser_history']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022\'Call each of the browser history flows.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['recursive_list_homedir'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['recursive_list_homedir']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\0221Recursively list the users homedir to this depth.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['recursive_list_user_registry'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['recursive_list_user_registry']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\022)Recursively list the users registry hive.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['artifact_list'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['artifact_list']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\033\022\031A list of Artifact names.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['timeline_collected_data'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['timeline_collected_data']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-Once complete create a timeline for the host.')
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['use_tsk'].has_options = True
_WINUSERACTIVITYINVESTIGATIONARGS.fields_by_name['use_tsk']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001+\022)Use raw filesystem access where possible.')
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['artifact_list'].has_options = True
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['artifact_list']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\022\037A list of Artifact class names.')
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['use_tsk'].has_options = True
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['use_tsk']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-Whether raw filesystem access should be used.')
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['store_results_in_aff4'].has_options = True
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['store_results_in_aff4']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001a\022_Should the collected artifacts be written to the GRR AFF4 namespace based on the AFF4->RDF map.')
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['output'].has_options = True
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001g\022eIf set, a relative URN to write each result to. This will create the collection if it does not exist.')
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['split_output_by_artifact'].has_options = True
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['split_output_by_artifact']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001a\022_If True, use output as a directory and write a separate collection for each artifact collected.')
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['knowledge_base'].has_options = True
_ARTIFACTCOLLECTORFLOWARGS.fields_by_name['knowledge_base']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001_\022[An optional knowledge base to use, if not specified we retrieve one from the client object.\030\002')
_INTERROGATEARGS.fields_by_name['lightweight'].has_options = True
_INTERROGATEARGS.fields_by_name['lightweight']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0014\0222Perform a light weight version of the interrogate.')
_FETCHALLFILESARGS.fields_by_name['findspec'].has_options = True
_FETCHALLFILESARGS.fields_by_name['findspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001o\022mWhich files to search for. The default is to search the entire system for files with an executable extension.')
_FETCHALLFILESARGS.fields_by_name['iteration_count'].has_options = True
_FETCHALLFILESARGS.fields_by_name['iteration_count']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\214\001\022\211\001Files examined per iteration before reporting back to the server. Should be large enough to make the  roundtrip to the server worthwhile.')
_FINGERPRINTFILEARGS.fields_by_name['pathspec'].has_options = True
_FINGERPRINTFILEARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035The file path to fingerprint.')
_IMAGEMEMORYARGS.fields_by_name['driver_installer'].has_options = True
_IMAGEMEMORYARGS.fields_by_name['driver_installer']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\206\001\022\201\001An optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\030\002')
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['destdir'].has_options = True
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['destdir']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\215\001\022\212\001Destination directory on the client for the temporary image. Leave blank to use defaults. Parent directories will be created if necessary.')
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['offset'].has_options = True
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['offset']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026Memory offset in bytes')
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['length'].has_options = True
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['length']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0225Number of bytes to copy (default 0 copies all memory)')
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['gzip'].has_options = True
_DOWNLOADMEMORYIMAGEARGS.fields_by_name['gzip']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001*\022(Gzip temporary image file on the client.')
_LOADMEMORYDRIVERARGS.fields_by_name['driver_installer'].has_options = True
_LOADMEMORYDRIVERARGS.fields_by_name['driver_installer']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\206\001\022\201\001An optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.\030\002')
_LOADMEMORYDRIVERARGS.fields_by_name['reload_if_loaded'].has_options = True
_LOADMEMORYDRIVERARGS.fields_by_name['reload_if_loaded']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001H\022-If the driver is already loaded we reload it.\"\027Force reload of driver.')
_ANALYZECLIENTMEMORYARGS.fields_by_name['driver_installer'].has_options = True
_ANALYZECLIENTMEMORYARGS.fields_by_name['driver_installer']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\204\001\022\201\001An optional DriverInstallTemplate proto to control driver installation. If not set, the default  installation proto will be used.')
_ANALYZECLIENTMEMORYARGS.fields_by_name['request'].has_options = True
_ANALYZECLIENTMEMORYARGS.fields_by_name['request']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A request for the client\'s volatility subsystem.')
_ANALYZECLIENTMEMORYARGS.fields_by_name['output'].has_options = True
_ANALYZECLIENTMEMORYARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')
_GREPMEMORYARGS.fields_by_name['request'].has_options = True
_GREPMEMORYARGS.fields_by_name['request']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\n\014BareGrepSpec\022\036A grepspec for memory devices.')
_GREPMEMORYARGS.fields_by_name['output'].has_options = True
_GREPMEMORYARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026The output collection.')
_GREPMEMORYARGS.has_options = True
_GREPMEMORYARGS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\332\374\343\304\001=\n;A grep specification which operates only on memory devices.')
_GETPROCESSESBINARIESARGS.fields_by_name['output'].has_options = True
_GETPROCESSESBINARIESARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')
_GETPROCESSESBINARIESVOLATILITYARGS.fields_by_name['output'].has_options = True
_GETPROCESSESBINARIESVOLATILITYARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')
_GETPROCESSESBINARIESVOLATILITYARGS.fields_by_name['filename_regex'].has_options = True
_GETPROCESSESBINARIESVOLATILITYARGS.fields_by_name['filename_regex']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001[\n\021RegularExpression\0226Regex used to filter the list of binaries to download.\"\016Filename Regex')
_SOPHOSCOLLECTORARGS.fields_by_name['pathtype'].has_options = True
_SOPHOSCOLLECTORARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030The requested path type.')
_SOPHOSCOLLECTORARGS.fields_by_name['output'].has_options = True
_SOPHOSCOLLECTORARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')
_MACTIMESARGS.fields_by_name['path'].has_options = True
_MACTIMESARGS.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0017\0225An AFF path (relative to the client area of the VFS).')
_MACTIMESARGS.fields_by_name['output'].has_options = True
_MACTIMESARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')
_FILECOLLECTORARGS.fields_by_name['findspecs'].has_options = True
_FILECOLLECTORARGS.fields_by_name['findspecs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001 \022\036A list of find specifications.')
_FILECOLLECTORARGS.fields_by_name['output'].has_options = True
_FILECOLLECTORARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')
_VOLATILITYPLUGINSARGS.fields_by_name['request'].has_options = True
_VOLATILITYPLUGINSARGS.fields_by_name['request']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A request for the client\'s volatility subsystem.')
_VOLATILITYPLUGINSARGS.fields_by_name['output'].has_options = True
_VOLATILITYPLUGINSARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')
_VOLATILITYPLUGINSARGS.fields_by_name['plugins'].has_options = True
_VOLATILITYPLUGINSARGS.fields_by_name['plugins']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001-\n\020VolatilityPlugin\022\031A list of plugins to run.')
_FIREFOXHISTORYARGS.fields_by_name['pathtype'].has_options = True
_FIREFOXHISTORYARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\035\022\033Type of path access to use.')
_FIREFOXHISTORYARGS.fields_by_name['get_archive'].has_options = True
_FIREFOXHISTORYARGS.fields_by_name['get_archive']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0226Should we get Archived History as well (3 months old).')
_FIREFOXHISTORYARGS.fields_by_name['username'].has_options = True
_FIREFOXHISTORYARGS.fields_by_name['username']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\220\001\022\215\001The user to get history for. If history_path is not set this will be used to guess the path to the history files. Can be in form DOMAIN\\user.')
_FIREFOXHISTORYARGS.fields_by_name['output'].has_options = True
_FIREFOXHISTORYARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')
_FIREFOXHISTORYARGS.fields_by_name['history_path'].has_options = True
_FIREFOXHISTORYARGS.fields_by_name['history_path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229Path to a profile directory that contains a History file.')
_CACHEGREPARGS.fields_by_name['grep_users'].has_options = True
_CACHEGREPARGS.fields_by_name['grep_users']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001<\022:A list of users to check. Default all users on the system.')
_CACHEGREPARGS.fields_by_name['pathtype'].has_options = True
_CACHEGREPARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\035\022\033Type of path access to use.')
_CACHEGREPARGS.fields_by_name['data_regex'].has_options = True
_CACHEGREPARGS.fields_by_name['data_regex']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\n\021RegularExpression\022#A regular expression to search for.')
_CACHEGREPARGS.fields_by_name['output'].has_options = True
_CACHEGREPARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022;If set, a path relative to the client URN to store results.')
_CACHEGREPARGS.fields_by_name['check_chrome'].has_options = True
_CACHEGREPARGS.fields_by_name['check_chrome']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\016\022\014Check Chrome')
_CACHEGREPARGS.fields_by_name['check_firefox'].has_options = True
_CACHEGREPARGS.fields_by_name['check_firefox']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\017\022\rCheck Firefox')
_CACHEGREPARGS.fields_by_name['check_ie'].has_options = True
_CACHEGREPARGS.fields_by_name['check_ie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-Check Internet Explorer (Not implemented yet)')
_DOWNLOADDIRECTORYARGS.fields_by_name['pathspec'].has_options = True
_DOWNLOADDIRECTORYARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001-\022+The pathspec for the directory to download.')
_DOWNLOADDIRECTORYARGS.fields_by_name['depth'].has_options = True
_DOWNLOADDIRECTORYARGS.fields_by_name['depth']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Maximum recursion depth.')
_DOWNLOADDIRECTORYARGS.fields_by_name['ignore_errors'].has_options = True
_DOWNLOADDIRECTORYARGS.fields_by_name['ignore_errors']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\\\022ZIf True, we do not raise an error in the casethat a directory or file cannot be not found.')
_LISTDIRECTORYARGS.fields_by_name['pathspec'].has_options = True
_LISTDIRECTORYARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022\'The pathspec for the directory to list.')
_RECURSIVELISTDIRECTORYARGS.fields_by_name['pathspec'].has_options = True
_RECURSIVELISTDIRECTORYARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\022\'The pathspec for the directory to list.')
_RECURSIVELISTDIRECTORYARGS.fields_by_name['max_depth'].has_options = True
_RECURSIVELISTDIRECTORYARGS.fields_by_name['max_depth']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\032\022\030Maximum recursion depth.')
_GREPARGS.fields_by_name['output'].has_options = True
_GREPARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026The output collection.')
_GLOBARGS.fields_by_name['paths'].has_options = True
_GLOBARGS.fields_by_name['paths']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001H\n\016GlobExpression\0226A list of paths to glob that can contain %% expansions')
_GLOBARGS.fields_by_name['pathtype'].has_options = True
_GLOBARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\034\022\032Type of access to glob in.')
_GLOBANDGREPARGS.fields_by_name['paths'].has_options = True
_GLOBANDGREPARGS.fields_by_name['paths']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001?\n\016GlobExpression\022-A path to glob that can contain %% expansions')
_GLOBANDGREPARGS.fields_by_name['pathtype'].has_options = True
_GLOBANDGREPARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\034\022\032Type of access to glob in.')
_GLOBANDGREPARGS.fields_by_name['grep'].has_options = True
_GLOBANDGREPARGS.fields_by_name['grep']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\n\014BareGrepSpec\022\030The parameters for grep.')
_GLOBANDGREPARGS.fields_by_name['output'].has_options = True
_GLOBANDGREPARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')
_FINDFILESARGS.fields_by_name['findspec'].has_options = True
_FINDFILESARGS.fields_by_name['findspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\022\037A find operation specification.')
_FINDFILESARGS.fields_by_name['output'].has_options = True
_FINDFILESARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0012\0220A path relative to the client to put the output.')
_FINDFILESARGS.fields_by_name['max_results'].has_options = True
_FINDFILESARGS.fields_by_name['max_results']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001%\022!Maximum number of results to get.\030\001')
_FINDFILESARGS.fields_by_name['iteration_count'].has_options = True
_FINDFILESARGS.fields_by_name['iteration_count']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\022\035Files examined per iteration.\030\001')
_GETFILEARGS.fields_by_name['pathspec'].has_options = True
_GETFILEARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&The pathspec for the file to retrieve.')
_GETFILEARGS.fields_by_name['read_length'].has_options = True
_GETFILEARGS.fields_by_name['read_length']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001U\022QThe amount of data to read from the file. If 0 we use the value from a stat call.\030\001')
_GETMBRARGS.fields_by_name['length'].has_options = True
_GETMBRARGS.fields_by_name['length']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\022%The length of the MBR buffer to read.')
_FILEDOWNLOADERARGS.fields_by_name['findspecs'].has_options = True
_FILEDOWNLOADERARGS.fields_by_name['findspecs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&List of find specifications to search.')
_FILEDOWNLOADERARGS.fields_by_name['pathspecs'].has_options = True
_FILEDOWNLOADERARGS.fields_by_name['pathspecs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\022%List of path specifications to fetch.')
_CHROMEHISTORYARGS.fields_by_name['pathtype'].has_options = True
_CHROMEHISTORYARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\035\022\033Type of path access to use.')
_CHROMEHISTORYARGS.fields_by_name['get_archive'].has_options = True
_CHROMEHISTORYARGS.fields_by_name['get_archive']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0018\0226Should we get Archived History as well (3 months old).')
_CHROMEHISTORYARGS.fields_by_name['username'].has_options = True
_CHROMEHISTORYARGS.fields_by_name['username']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\227\001\022\224\001The user to get Chrome history for. If history_path is not set this will be used to guess the path to the history files. Can be in form DOMAIN\\user.')
_CHROMEHISTORYARGS.fields_by_name['output'].has_options = True
_CHROMEHISTORYARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229Path to a profile directory that contains a History file.')
_CHROMEHISTORYARGS.fields_by_name['history_path'].has_options = True
_CHROMEHISTORYARGS.fields_by_name['history_path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001;\0229Path to a profile directory that contains a History file.')
_SENDFILEARGS.fields_by_name['pathspec'].has_options = True
_SENDFILEARGS.fields_by_name['pathspec']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&The pathspec for the file to retrieve.')
_SENDFILEARGS.fields_by_name['host'].has_options = True
_SENDFILEARGS.fields_by_name['host']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001%\022#Hostname or IP to send the file to.')
_SENDFILEARGS.fields_by_name['port'].has_options = True
_SENDFILEARGS.fields_by_name['port']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001&\022$Port number on the listening server.')
_SENDFILEARGS.fields_by_name['address_family'].has_options = True
_SENDFILEARGS.fields_by_name['address_family']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\022,address family to use (AF_INET or AF_INET6).')
_SENDFILEARGS.fields_by_name['key'].has_options = True
_SENDFILEARGS.fields_by_name['key']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0010\022.An encryption key given in hex representation.')
_SENDFILEARGS.fields_by_name['iv'].has_options = True
_SENDFILEARGS.fields_by_name['iv']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0013\0221The iv for AES, also given in hex representation.')
_CLIENTACTIONARGS.fields_by_name['action'].has_options = True
_CLIENTACTIONARGS.fields_by_name['action']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\022\026The action to execute.')
_CLIENTACTIONARGS.fields_by_name['save_to'].has_options = True
_CLIENTACTIONARGS.fields_by_name['save_to']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001F\022DIf set, interpreted as a path to write pickle dumps of responses to.')
_CLIENTACTIONARGS.fields_by_name['break_pdb'].has_options = True
_CLIENTACTIONARGS.fields_by_name['break_pdb']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0016\0224If True, run pdb.set_trace when responses come back.')
_CLIENTACTIONARGS.fields_by_name['action_args'].has_options = True
_CLIENTACTIONARGS.fields_by_name['action_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001.\022\030Client action arguments.*\022GetActionArgsClass')
_CONSOLEDEBUGFLOWARGS.fields_by_name['flow'].has_options = True
_CONSOLEDEBUGFLOWARGS.fields_by_name['flow']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\026\022\024The flow to execute.')
_CONSOLEDEBUGFLOWARGS.fields_by_name['save_to'].has_options = True
_CONSOLEDEBUGFLOWARGS.fields_by_name['save_to']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001L\022JIf not None, interpreted as an path to write pickle dumps of responses to.')
_CONSOLEDEBUGFLOWARGS.fields_by_name['break_pdb'].has_options = True
_CONSOLEDEBUGFLOWARGS.fields_by_name['break_pdb']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0016\0224If True, run pdb.set_trace when responses come back.')
_CONSOLEDEBUGFLOWARGS.fields_by_name['print_responses'].has_options = True
_CONSOLEDEBUGFLOWARGS.fields_by_name['print_responses']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035If True, print each response.')
_CONSOLEDEBUGFLOWARGS.fields_by_name['flow_args'].has_options = True
_CONSOLEDEBUGFLOWARGS.fields_by_name['flow_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001#\022\017Flow arguments.*\020GetFlowArgsClass')
_CREATECRONJOBFLOWARGS.fields_by_name['description'].has_options = True
_CREATECRONJOBFLOWARGS.fields_by_name['description']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001/\022-A human readable description of the cron job.')
_CREATECRONJOBFLOWARGS.fields_by_name['periodicity'].has_options = True
_CREATECRONJOBFLOWARGS.fields_by_name['periodicity']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\010CronSpec\022\033How often to run this hunt.')
_CREATECRONJOBFLOWARGS.fields_by_name['flow_args'].has_options = True
_CREATECRONJOBFLOWARGS.fields_by_name['flow_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\022*\020GetFlowArgsClass')
_CREATECRONJOBFLOWARGS.fields_by_name['lifetime'].has_options = True
_CREATECRONJOBFLOWARGS.fields_by_name['lifetime']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001m\n\010Duration\022aHow long each run of the cron should be allowed to run. Runs that exceed lifetime will be killed.')
_MODIFYHUNTFLOWARGS.fields_by_name['hunt_urn'].has_options = True
_MODIFYHUNTFLOWARGS.fields_by_name['hunt_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\006RDFURN\022\035The URN of the hunt to pause.')
_MODIFYHUNTFLOWARGS.fields_by_name['expiry_time'].has_options = True
_MODIFYHUNTFLOWARGS.fields_by_name['expiry_time']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001,\n\013RDFDatetime\022\035When should this hunt expire?')
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["NOOP"].has_options = True
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["NOOP"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\0010Do nothing (but still check access permissions.)')
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["DISABLE"].has_options = True
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["DISABLE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\001\024Disable ths cron job')
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["ENABLE"].has_options = True
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["ENABLE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\001\023Enable the cron job')
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["DELETE"].has_options = True
_MANAGECRONJOBFLOWARGS_ACTION.values_by_name["DELETE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), '\352\271\313\271\001\023Delete the cron job')
_MANAGECRONJOBFLOWARGS.fields_by_name['urn'].has_options = True
_MANAGECRONJOBFLOWARGS.fields_by_name['urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001!\n\006RDFURN\022\027The URN of the cron job')
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['hunt_urn'].has_options = True
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['hunt_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\030\n\006RDFURN\022\016URN of a hunt.')
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['metadata_urn'].has_options = True
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['metadata_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0014\n\006RDFURN\022*URN of a cron hunt output module metadata.')
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['output_plugin_name'].has_options = True
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['output_plugin_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\033\022\031Name of an output plugin.')
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['output_plugin_args'].has_options = True
_CRONHUNTOUTPUTFLOWARGS.fields_by_name['output_plugin_args']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001=\022!Args passed to the output plugin.*\030GetOutputPluginArgsClass')
_PLISTVALUEFILTERARGS.fields_by_name['request'].has_options = True
_PLISTVALUEFILTERARGS.fields_by_name['request']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\0011\022/A request for the client to parse a plist file.')
_PLISTVALUEFILTERARGS.fields_by_name['output'].has_options = True
_PLISTVALUEFILTERARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')
_RUNREPORTFLOWARGS.fields_by_name['report_name'].has_options = True
_RUNREPORTFLOWARGS.fields_by_name['report_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001,\n\nReportName\022\036The name of the report to run.')
_RUNREPORTFLOWARGS.fields_by_name['email'].has_options = True
_RUNREPORTFLOWARGS.fields_by_name['email']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001F\n\022DomainEmailAddress\0220The email address that messages will be sent to.')
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['download_binaries'].has_options = True
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['download_binaries']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001&\022$If set, also downloads the binaries.')
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['output'].has_options = True
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['pathtype'].has_options = True
_ENUMERATEWINDOWSSERVICESARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\037\022\035How to access the filesystem.')
_CHROMEPLUGINSARGS.fields_by_name['path'].has_options = True
_CHROMEPLUGINSARGS.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001]\022[A path to a Chrome Extensions directory. If not set, the path is guessed from the username.')
_CHROMEPLUGINSARGS.fields_by_name['pathtype'].has_options = True
_CHROMEPLUGINSARGS.fields_by_name['pathtype']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\r\022\013Access mode')
_CHROMEPLUGINSARGS.fields_by_name['output'].has_options = True
_CHROMEPLUGINSARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')
_CHROMEPLUGINSARGS.fields_by_name['username'].has_options = True
_CHROMEPLUGINSARGS.fields_by_name['username']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001(\022&The user to get Chrome extensions for.')
_CHROMEPLUGINSARGS.fields_by_name['download_files'].has_options = True
_CHROMEPLUGINSARGS.fields_by_name['download_files']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\"\022 Should extensions be downloaded?')
_CLIENTACTIONRUNNERARGS.fields_by_name['action'].has_options = True
_CLIENTACTIONRUNNERARGS.fields_by_name['action']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\020\022\016Action to run.')
_REQUESTAPPROVALWITHREASONFLOWARGS.fields_by_name['reason'].has_options = True
_REQUESTAPPROVALWITHREASONFLOWARGS.fields_by_name['reason']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\025\022\023Reason for approval')
_REQUESTAPPROVALWITHREASONFLOWARGS.fields_by_name['approver'].has_options = True
_REQUESTAPPROVALWITHREASONFLOWARGS.fields_by_name['approver']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\023\022\021Approver username')
_REQUESTAPPROVALWITHREASONFLOWARGS.fields_by_name['subject_urn'].has_options = True
_REQUESTAPPROVALWITHREASONFLOWARGS.fields_by_name['subject_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001:\n\006RDFURN\0220URN of the object that approval is required for.')
_GRANTAPPROVALWITHREASONFLOWARGS.fields_by_name['reason'].has_options = True
_GRANTAPPROVALWITHREASONFLOWARGS.fields_by_name['reason']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\025\022\023Reason for approval')
_GRANTAPPROVALWITHREASONFLOWARGS.fields_by_name['delegate'].has_options = True
_GRANTAPPROVALWITHREASONFLOWARGS.fields_by_name['delegate']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\023\022\021Delegate username')
_GRANTAPPROVALWITHREASONFLOWARGS.fields_by_name['subject_urn'].has_options = True
_GRANTAPPROVALWITHREASONFLOWARGS.fields_by_name['subject_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001:\n\006RDFURN\0220URN of the object that approval is required for.')
_STARTHUNTFLOWARGS.fields_by_name['hunt_urn'].has_options = True
_STARTHUNTFLOWARGS.fields_by_name['hunt_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001)\n\006RDFURN\022\037The URN of the hunt to execute.')
_PAUSEHUNTFLOWARGS.fields_by_name['hunt_urn'].has_options = True
_PAUSEHUNTFLOWARGS.fields_by_name['hunt_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\006RDFURN\022\035The URN of the hunt to pause.')
_CHECKHUNTACCESSFLOWARGS.fields_by_name['hunt_urn'].has_options = True
_CHECKHUNTACCESSFLOWARGS.fields_by_name['hunt_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\'\n\006RDFURN\022\035The URN of the hunt to check.')
_MEMORYHUNTARGS.fields_by_name['request'].has_options = True
_MEMORYHUNTARGS.fields_by_name['request']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001$\022\"Search memory for this expression.')
_MEMORYHUNTARGS.fields_by_name['output'].has_options = True
_MEMORYHUNTARGS.fields_by_name['output']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\266\001\022\263\001The path to the output container for this flow. Will be created under the client. supports format variables {u}, {p} and {t} for user, plugin and time. E.g. /analysis/{p}/{u}-{t}.')
_UPDATEVFSFILEARGS.fields_by_name['vfs_file_urn'].has_options = True
_UPDATEVFSFILEARGS.fields_by_name['vfs_file_urn']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\025\n\006RDFURN\022\013VFSFile urn')
_UPDATEVFSFILEARGS.fields_by_name['attribute'].has_options = True
_UPDATEVFSFILEARGS.fields_by_name['attribute']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\342\374\343\304\001\026\022\024Attribute to update.')
# @@protoc_insertion_point(module_scope)
