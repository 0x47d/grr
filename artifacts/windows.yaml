# Windows specific artifacts.

name: AllVADBinaryFiles
doc: Download all currently running binaries on Windows.
collectors:
- action: CollectArtifactFiles
  args:
    artifact_list: [FullVADBinaryList]
  returned_types: [PathSpec]
labels: [Volatility, Processes, Software]
supported_os: [Windows]
---
name: ApplicationEventLog
doc: Windows Application Event log.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\AppEvent.evt']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_Event_Log_(EVT)']
---
name: ApplicationEventLogEvtx
doc: Windows Application Event log for Vista or later systems.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\Application.evtx']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_XML_Event_Log_(EVTX)']
---
name: AvailableTimeZones
doc: The timezones avaialable on the system.
collectors:
- action: GetRegistryKeys
  args:
    path_list: ['HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones\*\*']
supported_os: [Windows]
urls: ['https://code.google.com/p/winreg-kb/wiki/TimeZoneKeys']
---
name: FullVADBinaryList
doc: Extract list of currently running binaries on Windows.
collectors:
- action: VolatilityPlugin
  args:
    plugin: vad
labels: [Volatility, Processes]
supported_os: [Windows]
---
name: EventLogs
doc: Windows Event logs.
collectors:
- action: CollectArtifactFiles
  args:
    artifact_list:
      - 'ApplicationEventLog'
      - 'ApplicationEventLogEvtx'
      - 'SecurityEventLog'
      - 'SecurityEventLogEvtx'
      - 'SystemEventLog'
      - 'SystemEventLogEvtx'
labels: [Logs]
supported_os: [Windows]
---
name: MFTFiles
doc: $MFT and $MFTMirr files.
collectors:
- action: GetFiles
  args:
    path_list:
      - '\$MFT'
      - '\$MFTMirr'
labels: [System]
supported_os: [Windows]
---
name: PrefectFiles
doc: Windows Prefetch files.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\Prefetch\*.pf']}
labels: [System]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Prefetch']
---
name: SecurityEventLog
doc: Windows Security Event log.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\SecEvent.evt']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_Event_Log_(EVT)']
---
name: SecurityEventLogEvtx
doc: Windows Security Event log for Vista or later systems.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\Security.evtx']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_XML_Event_Log_(EVTX)']
---
name: SetupApiLogs
doc: Windows setup API logs.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\setupapi.log']}
  conditions: [os_major_version < 6]
- action: GetFiles
  args:
    path_list:
      - '%%environ_systemroot%%\inf\setupapi.app.log'
      - '%%environ_systemroot%%\inf\setupapi.dev.log'
      - '%%environ_systemroot%%\inf\setupapi.offline.log'
  conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Setup_API_Logs']
---
name: SuperFetchFiles
doc: Windows SuperFetch files.
collectors:
- action: GetFiles
  args:
    path_list:
      - '%%environ_systemroot%%\Prefetch\Ag*.db'
      - '%%environ_systemroot%%\Prefetch\Ag*.db.trx'
labels: [System]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/SuperFetch']
---
name: SystemEventLog
doc: Windows System Event log.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\SysEvent.evt']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_Event_Log_(EVT)']
---
name: SystemEventLogEvtx
doc: Windows System Event log for Vista or later systems.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\System.evtx']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_XML_Event_Log_(EVTX)']
---
name: TerminalServicesEventLogEvtx
doc: Windows TerminalServices Event log.
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_systemroot%%\System32\winevt\Logs\Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx']}
conditions: [os_major_version >= 6]
labels: [Logs]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_XML_Event_Log_(EVTX)']
---
name: WindowsHostsFiles
doc: The Windows hosts and lmhosts file.
collectors:
- action: GetFiles
  args:
    path_list:
      - '%%environ_systemroot%%\System32\Drivers\etc\Lmhosts'
      - '%%environ_systemroot%%\System32\Drivers\etc\hosts'
supported_os: [Windows]
---
name: WindowsPersistenceMechanisms
doc: Persistence mechanisms in Windows.
collectors:
- action: CollectArtifacts
  args:
    artifact_list: [WindowsRunKeys, WindowsServices]
  returned_types: [PersistenceFile]
labels: [Software]
supported_os: [Windows]
---
name: WindowsPersistenceMechanismFiles
doc: Files that are run by Windows persistence mechanisms.
collectors:
- action: CollectArtifactFiles
  args:
    artifact_list: [WindowsPersistenceMechanisms]
    pathspec_attribute: pathspec
  returned_types: [StatEntry]
labels: [Software]
supported_os: [Windows]
---
name: WindowsRecycleBin
doc: Windows Recycle Bin (Recyler, $Recycle.Bin) files.
collectors:
- action: GetFiles
  args:
    path_list:
      - '\$Recycle.Bin\**'
      - '\Recycler\**'
labels: [Users]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows#Recycle_Bin']
---
name: WindowsRunKeys
doc: |
  Windows Run and RunOnce keys.

  Note users.sid will currently only expand to SIDs with profiles
  on the system, not all SIDs.
collectors:
- action: GetRegistryKeys
  args:
    path_list:
      - 'HKEY_USERS\%%users.sid%%\Software\Microsoft\Windows\CurrentVersion\Run\*'
      - 'HKEY_USERS\%%users.sid%%\Software\Microsoft\Windows\CurrentVersion\RunOnce\*'
      - 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\*'
      - 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce\*'
      - 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx\*'
labels: [Software]
supported_os: [Windows]
---
name: WindowsSearchDatabase
doc: Windows Search database (Windows.edb).
collectors:
- action: GetFiles
  args: {path_list: ['%%environ_allusersappdata%%\Microsoft\Search\Data\Applications\Windows\Windows.edb']}
labels: [Software]
supported_os: [Windows]
urls: ['http://www.forensicswiki.org/wiki/Windows_Desktop_Search']
---
name: WindowsServices
doc: Windows services from the registry.
collectors:
- action: GetRegistryKeys
  args:
    path_list:
      - '%%current_control_set%%\services\*\*'
      - '%%current_control_set%%\services\*\Parameters\*'
labels: [Software]
supported_os: [Windows]
urls:
  - 'http://support.microsoft.com/kb/103000'
  - 'https://code.google.com/p/winreg-kb/wiki/SystemKeys'
---
name: WindowsSystemRegistryFiles
doc: Windows system Registry files.
collectors:
- action: GetFiles
  args:
    path_list:
      - '%%environ_systemroot%%\System32\config\SAM'
      - '%%environ_systemroot%%\System32\config\SECURITY'
      - '%%environ_systemroot%%\System32\config\SOFTWARE'
      - '%%environ_systemroot%%\System32\config\SYSTEM'
      - '\System Volume Information\Syscache.hve'
labels: [System]
supported_os: [Windows]
urls: ['https://code.google.com/p/winreg-kb/wiki/RegistryFiles']
---
name: WindowsUserRecentFiles
doc: Windows user specific recent files.
collectors:
- action: GetFiles
  args:
    path_list:
      - '%%users.appdata%%\Roaming\Microsoft\Office\Recent\*'
      - '%%users.appdata%%\Roaming\Microsoft\Windows\Recent\*'
labels: [Users]
supported_os: [Windows]
---
name: WindowsUserRegistryFiles
doc: Windows user specific Registry files.
collectors:
- action: GetFiles
  args:
    path_list:
      - '%%users.homedir%%\NTUSER.DAT'
      - '%%users.homedir%%\NTUSER.MAN'
      - '%%users.localappdata%%\Microsoft\Windows\UsrClass.dat'
labels: [Users]
supported_os: [Windows]
urls: ['https://code.google.com/p/winreg-kb/wiki/RegistryFiles']
---
name: WMIAdminstators
doc: Aministrators via Windows Management Instrumentation (WMI).
collectors:
- action: WMIQuery
  args: {query: SELECT * from Win32_GroupUser where Name = "Administrators"}
conditions: [os_major_version >= 6]
labels: [Software]
supported_os: [Windows]
---
name: WMIDrivers
doc: Installed drivers via Windows Management Instrumentation (WMI).
collectors:
- action: WMIQuery
  args: {query: 'SELECT DisplayName, Description, InstallDate, Name, PathName, Status,
      State, ServiceType from Win32_SystemDriver'}
conditions: [os_major_version >= 6]
labels: [Software]
supported_os: [Windows]
---
name: WMIHotFixes
doc: Installed hotfixes via Windows Management Instrumentation (WMI).
collectors:
- action: WMIQuery
  args: {query: SELECT * from Win32_QuickFixEngineering}
conditions: [os_major_version >= 6]
labels: [Software]
supported_os: [Windows]
---
name: WMIInstalledSoftware
doc: Installed software via Windows Management Instrumentation (WMI).
collectors:
- action: WMIQuery
  args: {query: 'SELECT Name, Vendor, Description, InstallDate, InstallDate2, Version
      from Win32_Product'}
conditions: [os_major_version >= 6]
labels: [Software]
supported_os: [Windows]
---
name: WMILoginUsers
doc: |
  Login Users via Windows Management Instrumentation (WMI).

  This WMI query may take a long time to complete when run on a domain and
  will create load on a domain controller.
collectors:
- action: WMIQuery
  args: {query: SELECT * from Win32_GroupUser where Name = "login_users"}
conditions: [os_major_version >= 6]
labels: [Software]
supported_os: [Windows]
---
name: WMIProcessList
doc: Process listing via Windows Management Instrumentation (WMI).
collectors:
- action: WMIQuery
  args: {query: SELECT * from Win32_Process}
conditions: [os_major_version >= 6]
labels: [Software]
supported_os: [Windows]
---
name: WMIUsers
doc: |
  Users via Windows Management Instrumentation (WMI).

  Note that in a domain setup, this will probably return all users in the
  domain which will be expensive and slow. Consider limiting by SID like
  WMIProfileUsersHomeDir.
collectors:
- action: WMIQuery
  args: {query: SELECT * FROM Win32_UserAccount}
labels: [Users]
supported_os: [Windows]
urls: ['http://msdn.microsoft.com/en-us/library/windows/desktop/aa394507(v=vs.85).aspx']
